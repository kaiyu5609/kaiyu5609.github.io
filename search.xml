<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Angular入门之表单处理]]></title>
    <url>%2F2018%2F10%2F28%2FAngular%E5%85%A5%E9%97%A8%E4%B9%8B%E8%A1%A8%E5%8D%95%E5%A4%84%E7%90%86%2F</url>
    <content type="text"><![CDATA[Angular的表单处理 模板式表单 表单的数据模型是通过组件模板中的相关指令来定义的，因为使用这种方式定义表单的数据模型时，我们会受限于HTML的语法，所以，模板驱动方式只适合用于一些简单的场景 响应式表单 使用响应式表单时，你通过编写TypeScript代码而不是HTML代码来创建一个底层的数据模型，在这个模型定义好以后，你使用一些特定的指令，将模板上的HTML元素与底层的数据模型连接在一起 表单验证 不管是哪种表单，都有一个对应的数据模型来存储表单的数据。在模板式表单中，数据模型是有Angular基于你组件模板中的指令隐式创建的。而在响应式表单中，你通过编码明确的创建数据模型然后将模板上的HTML元素与底层的数据模型连接在一起 数据模型并不是一个任意的对象，它是一个由angular/forms模块中的一些特定的类，如：FormControl、FormGroup、FormArray等组成的。在模板式表单中，你是不能直接访问到这些类的 响应式表单并不会替你生成HTML，模板仍然需要你自己来编写 不管你使用哪种表单，你都需要在app模块中引入相应模块，如果要使用模板式表单，则需要引入FormsModule，如果要使用响应式表单，则需要引入ReactiveFormsModule Angular模板式表单 模板式表单内容 NgForm NgModel NgModelGroup NgForm Angular会默认给form表单添加ngForm指令，如果我们写了ngNoForm指令，那么Angular将不再接管这个表单 ngForm指令可以被一个模板本地变量引用，以便在模板中访问ngForm的实例，如#myForm=&quot;ngForm&quot;12345678910111213&lt;form #myForm="ngForm" ngForm (ngSubmit)="createUser(myForm.value)"&gt; &lt;div&gt;昵称:&lt;input type="text" ngModel name="nickname" pattern="[a-zA-Z0-9]+"&gt;&lt;/div&gt; &lt;div&gt;手机号:&lt;input type="number" ngModel name="mobile"&gt;&lt;/div&gt; &lt;div ngModelGroup="passwordInfo"&gt; &lt;div&gt;密码:&lt;input type="password" ngModel name="password"&gt;&lt;/div&gt; &lt;div&gt;确认密码:&lt;input type="password" ngModel name="passwordConfirm"&gt;&lt;/div&gt; &lt;/div&gt; &lt;button type="submit"&gt;注册&lt;/button&gt;&lt;/form&gt;&lt;div&gt; &lt;!-- FormGroup form表单的数据模型 --&gt; &#123;&#123;myForm.value | json&#125;&#125;&lt;/div&gt; Angular响应式表单 响应式表单内容 FormGroup 绑定方式：[formGroup]（属性绑定） FormControl 绑定方式：formControlName FormArray 绑定方式：formArrayName 123456789101112131415161718192021222324252627282930313233343536373839import &#123; FormControl &#125; from '@angular/forms';@Component(&#123; selector: 'app-reactived-form', templateUrl: './reactived-form.component.html', styleUrls: ['./reactived-form.component.css']&#125;)export class ReactivedFormComponent implements OnInit &#123; private formModel: FormGroup; constructor() &#123; this.formModel = new FormGroup(&#123; nickname: new FormControl(), mobiles: new FormArray([ new FormControl() ]), passwordInfo: new FormGroup(&#123; password: new FormControl(), passwordConfirm: new FormControl() &#125;) &#125;); &#125; addMobile() &#123; let mobiles = this.formModel.get('mobiles') as FormArray;// 强转一下，强转成 `FormArray`，get方法取到的是 `AbstractControl` 抽象类 mobiles.push(new FormControl()); console.log(this.formModel.value); &#125; createUser() &#123; console.log(this.formModel); &#125; ngOnInit() &#123; &#125;&#125; 响应式表单模板的绑定，如下： 12345678910111213141516&lt;form [formGroup]="formModel" (ngSubmit)="createUser()"&gt; &lt;div&gt;昵称:&lt;input type="text" formControlName="nickname" pattern="[a-zA-Z0-9]+"&gt;&lt;/div&gt; &lt;div&gt;手机号: &lt;ul formArrayName="mobiles"&gt; &lt;li *ngFor="let email of formModel.get('mobiles').controls; let i = index;"&gt; &lt;input [formControlName]="i"&gt; &lt;/li&gt; &lt;/ul&gt; &lt;button type="button" (click)="addMobile()"&gt;增加Mobile&lt;/button&gt; &lt;/div&gt; &lt;div formGroupName="passwordInfo"&gt; &lt;div&gt;密码:&lt;input type="password" formControlName="password"&gt;&lt;/div&gt; &lt;div&gt;确认密码:&lt;input type="password" formControlName="passwordConfirm"&gt;&lt;/div&gt; &lt;/div&gt; &lt;button type="submit"&gt;注册&lt;/button&gt;&lt;/form&gt; FormBuilder，简化响应式表单的定义 this.fb.group 相当于实例化一个 FormGroup this.fb.array 相当于实例化一个 FormArray [&#39;&#39;] 相当于实例化一个 FormControl，数组第一个值是表单输入框的默认值1234567891011121314private fb: FormBuilder = new FormBuilder();constructor() &#123; this.formModel = this.fb.group(&#123; nickname: [''], mobiles: this.fb.array([ [''] ]), passwordInfo: this.fb.group(&#123; password: [''], passwordConfirm: [''] &#125;) &#125;);&#125; Angular表单校验 表单校验内容 Angular的校验器 校验响应式表单 校验模板式表单 Angular的校验器 预定义校验器 Validators.required Validators.minLength | maxLength Validators.pattern 123456789101112131415private fb: FormBuilder = new FormBuilder();constructor() &#123; this.formModel = this.fb.group(&#123; nickname: ['myname', Validators.required], // nickname: ['myname', [Validators.required, Validators.minLength(6)]],// 多个校验器 mobiles: this.fb.array([ [''] ]), passwordInfo: this.fb.group(&#123; password: [''], passwordConfirm: [''] &#125;) &#125;);&#125; 我们定义好针对nickname属性的校验器以后，我们就可以通过formModel对象的valid来判断当前这个属性的值是否合法 12345678constructor() &#123; // ...&#125;createUser() &#123; let nicknameValid: boolean = this.formModel.get('nickname').valid; console.log('nickname是否校验通过：' + nicknameValid);&#125; 我们也可以通过formModel对象的errors来获取错误信息 12345678constructor() &#123; // ...&#125;createUser() &#123; let nicknameErrors: any = this.formModel.get('nickname').errors; console.log('nickname的校验信息：' + JSON.stringify(nicknameErrors));&#125; 自定义校验器（需要校验逻辑更复杂）来写一个校验手机号码的校验器 12345678910111213141516171819private fb: FormBuilder = new FormBuilder();mobileValidator(mobile: FormControl): any &#123; let value = (mobile.value || '') + ''; let reg = /^(((13[0-9]&#123;1&#125;)|(15[0-9]&#123;1&#125;)|(18[0-9]&#123;1&#125;))+\d&#123;8&#125;)$/; let valid = reg.test(value); return valid ? null : &#123; mobile: true &#125;;// 返回`null`表示校验通过&#125;constructor() &#123; this.formModel = this.fb.group(&#123; nickname: [''], mobiles: ['', this.mobileValidator],// 自定义手机号码校验器 passwordInfo: this.fb.group(&#123; password: [''], passwordConfirm: [''] &#125;) &#125;);&#125; 为FormGroup定义一个校验器 12345678910111213141516171819202122232425passwordValidator(info: FormGroup): any &#123; let password: FormControl = info.get('password') as FormControl; let pConfirm: FormControl = info.get('passwordConfirm') as FormControl; let valid: boolean = password.value === pConfirm.value; return valid ? null : &#123; password: true &#125;;// 返回`null`表示校验通过&#125;constructor() &#123; this.formModel = this.fb.group(&#123; nickname: [''], mobiles: [''], passwordInfo: this.fb.group(&#123; password: [''], passwordConfirm: [''] &#125;, &#123; validator: this.passwordValidator// 自定义确认密码校验器，FormGroup添加的校验器稍微不一样 &#125;) &#125;);&#125;createUser() &#123; if (this.formModel.valid) &#123;// 整个表单合法 console.log(this.formModel.value); &#125;&#125; 当校验失败，你会希望显示错误信息给用户，则需要修改组件的模板 12345678910111213141516171819202122232425262728&lt;form [formGroup]="formModel" (ngSubmit)="createUser()"&gt; &lt;div&gt;昵称:&lt;input type="text" formControlName="nickname" pattern="[a-zA-Z0-9]+"&gt;&lt;/div&gt; &lt;div [hidden]="!formModel.hasError('required', 'nickname')"&gt; 名称是必填项 &lt;/div&gt; &lt;div [hidden]="!formModel.hasError('minlength', 'nickname')"&gt; 名称的最小长度是6 &lt;/div&gt; &lt;div&gt;手机号: &lt;ul formArrayName="mobiles"&gt; &lt;li *ngFor="let email of formModel.get('mobiles').controls; let i = index;"&gt; &lt;input [formControlName]="i"&gt; &lt;/li&gt; &lt;/ul&gt; &lt;button type="button" (click)="addMobile()"&gt;增加Mobile&lt;/button&gt; &lt;/div&gt; &lt;div formGroupName="passwordInfo"&gt; &lt;div&gt;密码:&lt;input type="password" formControlName="password"&gt;&lt;/div&gt; &lt;div [hidden]="!formModel.hasError('required', 'passwordInfo.password')"&gt; 密码是必填项 &lt;/div&gt; &lt;div&gt;确认密码:&lt;input type="password" formControlName="passwordConfirm"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div [hidden]="!formModel.hasError('password', 'passwordInfo')"&gt; 密码不匹配 &lt;/div&gt; &lt;button type="submit"&gt;注册&lt;/button&gt;&lt;/form&gt; 错误信息也可以由校验器提供 123456passwordValidator(info: FormGroup): any &#123; let password: FormControl = info.get('password') as FormControl; let pConfirm: FormControl = info.get('passwordConfirm') as FormControl; let valid: boolean = password.value === pConfirm.value; return valid ? null : &#123; password: &#123; description: '密码和确认密码不匹配' &#125; &#125;;&#125; 123&lt;div [hidden]="!formModel.hasError('password', 'passwordInfo')"&gt; &#123;&#123; formModel.getError('password', 'passwordInfo')?.description &#125;&#125;&lt;/div&gt; 异步校验器（它返回的是一个可观测的流Observable） 123456mobileAsyncValidator(mobile: FormControl): any &#123; let value = (mobile.value || '') + ''; let reg = /^(((13[0-9]&#123;1&#125;)|(15[0-9]&#123;1&#125;)|(18[0-9]&#123;1&#125;))+\d&#123;8&#125;)$/; let valid = reg.test(value); return Observable.of(valid ? null : &#123;mobile: true&#125;).delay(5000);&#125; Angular表单校验的状态字段 touched和untouched pristine（值改变的时候进行检验）和dirty pending（进行异步检验的时候） 123456789&lt;div formGroupName="passwordInfo"&gt; &lt;div&gt;密码:&lt;input type="password" formControlName="password"&gt;&lt;/div&gt; &lt;div [hidden]="formModel.get('passwordInfo.password').valid || formModel.get('passwordInfo.password').untouched"&gt; &lt;div [hidden]="!formModel.hasError('required', 'passwordInfo.password')"&gt; 密码是必填项 &lt;/div&gt; &lt;/div&gt; &lt;div&gt;确认密码:&lt;input type="password" formControlName="passwordConfirm"&gt;&lt;/div&gt;&lt;/div&gt; 给表单控件添加自定义错误样式名 123456&lt;div formGroupName="passwordInfo"&gt; &lt;div&gt;昵称:&lt;input type="text" [class.inputHasError]="formModel.get('nickname').invalid" formControlName="nickname" pattern="[a-zA-Z0-9]+"&gt;&lt;/div&gt; &lt;div [hidden]="!formModel.hasError('required', 'nickname')"&gt; 名称是必填项 &lt;/div&gt;&lt;/div&gt; 校验模板式表单 将自定义校验器包装成指令 123456789101112// directives/mobile-validator.directive.tsimport &#123; Directive &#125; from '@angular/core';import &#123; NG_VALIDATORS &#125; from '@angular/forms';import &#123; mobileValidator &#125; from '../validators/Validators';// 检验器可以放置在全局的一个方法@Directive(&#123; selector: '[mobile]', providers: [&#123; provide: NG_VALIDATORS, useValue: mobileValidator, multi: true &#125;]&#125;)export class MobileValidatorDirective &#123; constructor() &#123;&#125;&#125; 123456789101112&lt;form #myForm="ngForm" ngForm (ngSubmit)="createUser(myForm.value, myForm.valid)" novalidate&gt; &lt;div&gt;昵称:&lt;input type="text" ngModel required name="nickname" pattern="[a-zA-Z0-9]+"&gt;&lt;/div&gt; &lt;div&gt;手机号:&lt;input type="number" ngModel mobile name="mobile"&gt;&lt;/div&gt; &lt;div [hidden]="!myForm.form.hasError('required', 'nickname')"&gt; 名称是必填项 &lt;/div&gt; &lt;div ngModelGroup="passwordInfo"&gt; &lt;div&gt;密码:&lt;input type="password" ngModel name="password"&gt;&lt;/div&gt; &lt;div&gt;确认密码:&lt;input type="password" ngModel name="passwordConfirm"&gt;&lt;/div&gt; &lt;/div&gt; &lt;button type="submit"&gt;注册&lt;/button&gt;&lt;/form&gt; 注：在模板表单中是不能使用状态字段的]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Angular入门之组件间通讯]]></title>
    <url>%2F2018%2F10%2F28%2FAngular%E5%85%A5%E9%97%A8%E4%B9%8B%E7%BB%84%E4%BB%B6%E9%97%B4%E9%80%9A%E8%AE%AF%2F</url>
    <content type="text"><![CDATA[Angular组件间通讯 组件的输入输出属性 父子组件之间应该避免直接访问彼此的内部，而应该通过输入输出属性来通讯 组件可以通过输出属性发射自定义事件，这些事件可以携带任何你想携带的数据 使用中间人模式传递数据 在没有父子关系的组件之间，尽量使用中间人模式进行通讯 组件声明周期以及Angular的变化发现机制 父组件可以在运行时投影一个或多个模板片段到子组件中 每个Angular组件都提供了一组生命周期钩子，供你在某些特定的事件发生时执行相应的逻辑 Angular的变更检测机制会监控组件属性的变化并自动更新视图，这个检测非常频繁并且默认是针对整个组件树的，所以实现相关钩子时要慎重 你可以标记你的组件树种的一个分支，使其被排除在变更检测机制之外OnPush策略 Angular组件输入属性 @Input() 单向的传递 1234export class ProductComponent implements OnInit &#123; @Input() private keyword: string;&#125; Angular组件输出属性 @Output() 单向的传递 12345678910111213export class ProductComponent implements OnInit &#123; @Output() searchResult:EventEmitter&lt;Product&gt; = new EventEmitter(); constructor() &#123;&#125; ngOnInit() &#123; this.searchResult.emit(&#123; 'name': 'iPhone XR', 'price': '6499' &#125;); &#125;&#125; 12&lt;!-- 父组件中接收 --&gt;&lt;app-child-search (searchResult)="searchResultHandler(product)"&gt;&lt;/app-child-search&gt; 也可以给@Output()取个别名 12@Output('currProduct')searchResult:EventEmitter&lt;Product&gt; = new EventEmitter(); 12&lt;!-- 父组件中接收 --&gt;&lt;app-child-search (currProduct)="searchResultHandler(product)"&gt;&lt;/app-child-search&gt; Angular组件声明周期 组件初始化（依次执行的顺序，如下：） constructor ngOnChanges ngOnInit ngDoCheck ngAfterContentInit ngAfterContentChecked ngAfterViewInit ngAfterViewChecked 变化检测 ngOnChanges ngDoCheck ngAfterContentChecked ngAfterViewChecked 组件销毁 ngOnDestroy Angular组件的OnChanges钩子 在组件输入属性变化时，该方法被调用 这里需要理解，可变对象和不可变对象，基本数据类型是不可变的，复合数据类型是可变的 可变对象的属性发生变化时，该方法不会被调用 Angular组件的变更检测和DoCheck钩子 变更检测策略 default策略，不管变更发生在哪个组件上，zone.js都会检查整个组件树 OnPush策略，当某个组件设置的该策略，变更不会检查他的子组件 OnChanges钩子不能检测可变对象的属性发生变化，那又没有哪个钩子可以检查这种情况呢，它就是DoCheck钩子 该方法会频繁调用 一定要判断当前监控的属性和它上次的值是否变化，才去做你想做的事情 Angular组件的view钩子 怎样在父组件中调用子组件的api? 1234567&lt;!-- 这里是父组件的模板 --&gt;&lt;!-- 模板变量：#child --&gt;&lt;app-child #child&gt;&lt;/app-child&gt;&lt;!-- 不仅可以在组件控制器中调用子组件的方法，还可以在模板上调用 --&gt;&lt;button (click)="child.greeting('hello')"&gt;按钮&lt;/button&gt; 123456789101112131415// 父组件export class AppComponent implements OnInit &#123; @ViewChild('child') child: ChildCompoent; // 用`@ViewChild`装饰器可以获得子组件的引用，就可调用子组件的`api` constructor() &#123;&#125; ngOnInit(): void &#123; this.child.greeting('hello'); &#125;&#125; Angular组件的ngAfterViewInit钩子和ngAfterViewChecked钩子 这两个钩子是在组件的模板，所有的内容都被组装完成，即模板已呈现给用户看了之后，这两个方法被调用 当子组件视图初始化和变更检测完毕后，才到父组件的视图初始化和变更检测 ngAfterViewInit钩子只调用一次 ngAfterViewChecked钩子，在后续视图改变时，就会变调用 在这两个钩子中，都不能再更新组件中某个属性的值，会抛出异常，除非使用setTimeout Angular组件的ngContent指令，类似于angularJS的ng-transclude ngContent指令：投影 父组件中使用子组件，在子组件中写的内容（html标签），会真正映射到子组件模板中，带有&lt;ng-content&gt;&lt;/ng-content&gt;指令标记的位置 想投影多个内容，那就给html标签添加class类名，在子组件模板中，&lt;ng-content select=&quot;.box-1&quot;&gt;&lt;/ng-content&gt; Angular组件的ngAfterContentInit钩子和ngAfterContentChecked钩子 子组件在父组件投影进来的内容，初始化完成和变更检测完成才调用这两个方法 ngAfterContentInit钩子只调用一次 ngAfterContentChecked钩子，在投影改变时，就会变调用 Angular组件的ngDestory钩子 路由离开后，会被调用]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Angular入门之响应式编程及管道]]></title>
    <url>%2F2018%2F10%2F28%2FAngular%E5%85%A5%E9%97%A8%E4%B9%8B%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%8F%8A%E7%AE%A1%E9%81%93%2F</url>
    <content type="text"><![CDATA[Angular响应式编程 观察者模式与Rxjs 12345678910var subscription = Observable.from([1, 2, 3, 4]).filter((d) =&gt; d % 2 == 0).map((d) =&gt; d * d).subscribe( (d) =&gt; console.log(d), (e) =&gt; console.error(e), () =&gt; console.log('end'));subscription.unsubscribe(); 可观察对象Observable（流） 表示一组值或者事件的集合 观察者Observer 一个回调函数集合，它知道怎样去监听被Observable发送的值 订阅Subscription 表示一个可观察对象，主要用于取消注册 操作符Operators 纯碎的函数，使开发者可以以函数编程的方式处理集合 如：filter、map函数 如何使用响应式编程来做事件处理 之 节流处理 Observable FormControl 1&lt;input [formControl]="searchInput" /&gt; 123456789101112131415161718// `FormControl` 在 `@angular/forms` 模块中的 `ReactiveFormsModule`，需要在`主模块`的`imports`中导入import &#123; FormControl &#125; from '@angular/forms';import 'rxjs/Rx';@Component(&#123; &#125;)export class ProductManageComponent implements OnInit &#123; private searchInput: FormControl = new FormControl(); private keyword: string; constructor() &#123; this.searchInput.valueChanges .debounceTime(500)// 节流操作 .subscribe( keyword =&gt; this.keyword = keyword); &#125;&#125; Angular管道 date:&#39;yyyy-MM-dd HH:mm:ss&#39; number:&#39;2.1-4&#39;：最少保留1位小数，最多保留4位小数 自定义管道（结合formControl根据关键字过滤列表的数据） 命令：ng g pipe pipe/productFilter 123456789101112131415161718// 自定义管道需要在 `主模块`的 `declarations`中声明import &#123; Pipe, PipeTransform &#125; from '@angular/core';@Pipe(&#123; name: 'productFilter'&#125;)export class ProductFilterPipe implements PipeTransform &#123; transform(list: any[], field: string, keyword: string): any &#123; if (!field || !keyword) &#123; return list; &#125; return list.filter(item =&gt; &#123; let itemFieldValue = item[field].toLowerCase(); return itemFieldValue.indexOf(keyword) &gt;= 0; &#125;); &#125;&#125; 123456789&lt;!-- 根据input输入的值，保存到keyword中，然后通过管道productFilter， 以product.name与keyword匹配来进行过滤列表数据--&gt;&lt;input [formControl]="searchInput" /&gt;&lt;ul&gt; &lt;li *ngFor="let product of products | productFilter:'name':keyword; let i = index;"&gt;&lt;/li&gt;&lt;/ul&gt;]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Angular入门之依赖注入]]></title>
    <url>%2F2018%2F10%2F20%2FAngular%E5%85%A5%E9%97%A8%E4%B9%8B%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%2F</url>
    <content type="text"><![CDATA[Angular依赖注入 依赖注入内容 什么是依赖注入模式及使用依赖注入的好处 介绍Angular的依赖注入实现：注入器和提供器 注入器的层级关系 依赖注入 依赖注入：Dependency Injection，简称DI 一个对象a:A需要依赖另外一个类型为B的对象b，那么对象a不需要明确地实例化对象b，b会由外部机制注入进来，对象a只要声明我需要B类型的对象，有人能给我一个么，这就是依赖注入需要解决的问题 与依赖注入经常同时出现的另一个概念叫做控制反转 控制反转：Inversion of Control，简称IOC 控制反转是指将依赖的控制权从代码的内部转到代码的外部 假如我们这样编写代码 123456var product = new Product();// 这句话，决定我们的代码需要依赖Product类createShipment(product);// 如果有一天我们需要依赖的不是Product了，而是AnotherProduct；那么我们需要修改代码的内部，变成如下：var product = new AnotherProduct();createShipment(product); 而如果实现了控制反转，则内部代码只需要声明我需要product，至于传进来的是Product，还是AnotherProduct，是由代码的外部决定的，这时代码的控制权由代码的内部转到了外部 依赖注入和控制反转表达的是一个思想，控制反转侧重于描述目的，目的是将依赖的控制权从代码的内容转到代码的外部；而依赖注入侧重于描述手段，就是如何来实现控制反转，使用的手段叫依赖注入 实现了控制反转的框架被称为IOC容器，Angular框架就是一个IOC容器，Angular实现控制反转的手段就是依赖注入 依赖注入的好处 松耦合（消除组件跟服务的紧耦合关系，通过依赖注入可以让组件依赖不同的服务，并且任意更换，这使得组件可以高度复用） 提高可测试性（假如项目的开发是前后端分离，前端不需要依赖后端服务的开发，可以先直接Mock一个服务来调试，等后端服务真正做好后，再进行联调，使服务可以随意切换） 注入器和提供器 注入器 1constructor(private productService: ProductService) &#123; &#125; 提供器 123456// 简写providers: [ProductService]// 或者providers: [&#123; provide: ProductService, useClass: ProductService &#125;]// 或者 通过工厂方法providers: [&#123; provide: ProductService, useFactory: () =&gt; &#123; &#125; &#125;]]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Angular入门之路由]]></title>
    <url>%2F2018%2F10%2F14%2FAngular%E5%85%A5%E9%97%A8%E4%B9%8B%E8%B7%AF%E7%94%B1%2F</url>
    <content type="text"><![CDATA[Angular路由的基础知识 路由内容 基本用法 子路由、保护路由和辅助路由 名称 简介 Routes 路由配置，保存着哪个URL对应展示哪个组件，以及在哪个RouteOutlet中展示组件 RouterOutlet 在html中标记路由内容呈现位置的占位符指令 Router 负责在运行时执行路由的对象，可以通过调用其navigate()和navigateByUrl()方法来导航到一个指定的路由 RouterLink 在html中声明路由导航用的指令 ActivatedRoute 当前激活的路由对象，保存着当前路由的信息，如路由地址，路由参数等 路由信息的配置文件（app-routing.module.ts） 1234567891011121314151617import &#123; NgModule &#125; from '@angular/core';import &#123; RouterModule, Routes &#125; from '@angular/router';import &#123; HomeComponent &#125; from './home/home.component';import &#123; DetailComponent &#125; from './detail/detail.component';import &#123; Code404Component &#125; from './code404/code404.component';const routes: Routes = [&#123; path: '', component: HomeComponent,// path 不要用'/'开头 path: 'detail', component: DetailComponent, path: '**', component: Code404Component,// 404页面路由&#125;];@NgModule(&#123; imports: [RouterModule.forRoot(routes)], exports: [RouterModule]&#125;)export class AppRoutingModule &#123; &#125; 模板（app-component.html） 1234&lt;a [routerLink]="['/']"&gt;主页&lt;/a&gt;&lt;a [routerLink]="['/detail']"&gt;详情页&lt;/a&gt;&lt;input type="button" value="详情页" (click)="toDetail()"&gt;&lt;router-outlet&gt;&lt;/router-outlet&gt; 使用 Router 在组件中进行路由导航（app.component.ts） 123456789101112131415import &#123; Component &#125; from '@angular/core';import &#123; Router &#125; from '@angular/router';@Component(&#123; selector: 'app-root', templateUrl: './app.component.html', styleUrls: ['./app.component.css']&#125;)export class AppComponent &#123; constructor(private router: Router) &#123; &#125; toDetail() &#123; this.router.navigate(['/detail']); &#125;&#125; Angular在路由时传递数据 在查询参数中传递数据 1234&lt;!-- 通过 ? 传递 queryParams --&gt;&lt;a [routerLink]="['/detail?id=1&amp;name=2']"&gt;详情页&lt;/a&gt;&lt;!-- 或者 --&gt;&lt;a [routerLink]="['/detail']" [queryParams]="&#123;id:1,name:2&#125;"&gt;详情页&lt;/a&gt; 1234567891011121314// 在路由的目标组件中，通过以下方式获取export class DetailComponent implements OnInit &#123; private id: number; constructor(private routeInfo: ActivatedRoute) &#123; &#125; ngOnInit() &#123; // 快捷获取：snapshot方式（参数快照），即组件初始化时，id只赋值一次 this.id = this.routeInfo.snapshot.queryParams['id']; // 或者对参数进行订阅，在同一个组件中（DetailComponent）中切换参数时就得用订阅的方式 this.routeInfo.queryParams.subscribe((queryParams: QueryParams) =&gt; &#123; this.id = queryParams['id']; &#125;); &#125;&#125; 在路由路径中传递数据 1&lt;a [routerLink]="['/detail', 1]"&gt;详情页&lt;/a&gt; 12// routes&#123; path: 'detail/:id' &#125; // /detail/1 1234567891011121314// 在路由的目标组件中，通过以下方式获取export class DetailComponent implements OnInit &#123; private id: number; constructor(private routeInfo: ActivatedRoute) &#123; &#125; ngOnInit() &#123; // 快捷获取：snapshot方式（参数快照），即组件初始化时，id只赋值一次 this.id = this.routeInfo.snapshot.params['id']; // 或者对参数进行订阅，在同一个组件中（DetailComponent）中切换参数时就得用订阅的方式 this.routeInfo.params.subscribe((params: Params) =&gt; &#123; this.id = params['id']; &#125;); &#125;&#125; 在路由配置中传递数据 123// routes&#123; path: 'detail', component: DetailComponent, data: [&#123; isProd: true &#125;] &#125; // data 属性本身是一个数组，在数组中可以定义任意个对象，isProd: 是否是生产环境 12345678// 在路由的目标组件中，通过data的下标和属性名方式获取export class DetailComponent implements OnInit &#123; private isProd: boolean; constructor(private routeInfo: ActivatedRoute) &#123; &#125; ngOnInit() &#123; this.isProd = this.routeInfo.snapshot.data[0]['isProd']; &#125;&#125; Angular重定向路由 在用户访问一个特定的地址时，将其重定向到另一个指定的地址。 即：我们想通过localhost:4200来重定向到localhost:4200/home1234const routes: Routes = [&#123; path: '', redirectTo: '/home', pathMatch: 'full',// pathMatch: 'full' || 'prefix', 精准匹配 || 前缀匹配 path: 'home', component: HomeComponent,&#125;]; Angular子路由 略 &#39;./&#39; children Angular辅助路由 需要声明路由插座的名称 primary为主路由，aux为辅助路由 1234&lt;a [routerLink]="[&#123;outlets: &#123;primary: 'home', aux: 'consult'&#125;&#125;]"&gt;详情页&lt;/a&gt;&lt;a [routerLink]="[&#123;outlets: &#123;aux: null&#125;&#125;]"&gt;详情页&lt;/a&gt;&lt;router-outlet name="aux"&gt;&lt;/router-outlet&gt; 12// routes 规定这个组件只能在名为“aux”的路由插座中显示&#123; path: 'consult', component: ConsultComponent, outlet: 'aux' &#125; Angular路由守卫 CanActivate：处理导航到某路由的情况。 CanDeactivate：处理从当前路由离开的情况。 Resolve：在路由激活之前获取路由数据。 CanActivate PermissionGuard组件（permission.guard.ts） 12345678910111213import &#123; CanActivate &#125; from '@angular/router';export class PermissionGuard implement CanActivate &#123; canActivate() &#123;// 该方法需要返回一个布尔值 var hasPermission: boolean = Math.random() &lt; 0.5; if (!hasPermission) &#123; console.log('用户无权访问此页面'); &#125; return hasPermission; &#125;&#125; 路由信息的配置文件（app-routing.module.ts） 1234const routes: Routes = [&#123; // 不过需要有人帮我们实例化这个PermissionGuard组件 path: 'detail', component: DetailComponent, canActivate: [PermissionGuard]&#125;]; Angular主模块（app.module.ts） 12345@NgModule(&#123; ..., providers: [PermissionGuard],// 实例化组件 ...&#125;); CanDeactivate FocusGuard组件（focus.guard.ts）123456789101112import &#123; CanDeactivate &#125; from '@angular/router';export class FocusGuard implement CanDeactivate&lt;DetailComponent&gt; &#123; // 不同的是这里会注入当前的组件，获取组件的状态，然后判断离开时需要做的事情 canDeactivate(component: DetailComponent) &#123;// 该方法需要返回一个布尔值 if (component.isFocus()) &#123;// DetailComponent的某个方法 return true; &#125; else &#123; return window.confirm("不关注就离开吗？"); &#125; &#125;&#125; Resolve 有时候我们会先异步去请求后端服务的数据，等响应之后再将数据绑定到页面上，则需要用到该功能；不然页面可能会报错，找不到某某对象的属性，如：Detail的id和name。 DetailResolve组件（detail.resolve.ts） 1234567891011121314151617181920212223import &#123; Router, Resolve, ActivatedRouteSnapshot, RouterStateSnapshot &#125; from '@angular/router';import &#123; Detail &#125; from '../detail/detail.component';import &#123; Observable &#125; from 'rxjs';import &#123; Injectable &#125; from '@angular/core';@Injectable()export class DetailResolve implement Resolve&lt;Detail&gt; &#123; constructor(private router: Router) &#123; &#125; resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Detail | Observable&lt;Detail&gt; | Promise&lt;Detail&gt; &#123; // ActivatedRouteSnapshot相当于上文的 this.routeInfo.snapshot let id = route.params['id']; if (id == 1) &#123; return new Detail(1, 'Angular'); &#125; else &#123; this.router.navigate(['/home']); return; &#125; &#125;&#125; 路由信息的配置文件（app-routing.module.ts） 123456const routes: Routes = [&#123; // 需要在`@NgModule`的`providers`中实例化这个DetailResolve组件 path: 'detail', component: DetailComponent, resolve: &#123; detail: DetailResolve &#125;&#125;]; DetailComponent (detail.component.ts） 123456789export class DetailComponent implements OnInit &#123; private detail: Detail; constructor(private routeInfo: ActivatedRoute) &#123; &#125; ngOnInit() &#123; this.routeInfo.data.subscribe((data: &#123;detail: Detail&#125;) =&gt; &#123; this.detail = data.detail; &#125;); &#125;&#125; Angular路由的实战 可一看]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Angular入门之简介]]></title>
    <url>%2F2018%2F09%2F22%2FAngular%E5%85%A5%E9%97%A8%E4%B9%8B%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[angularJS的优点 模板功能强大丰富 比较完善的前端MVC框架 引入了Java的一些概念 angularJS的一些问题，和Angular之间的对比 性能 双向数据绑定是一把双刃剑，随着组件的增加，项目越来越复杂，双向数据绑定会带来性能问题 脏检查机制，通过跟踪数据的改变来动态的更新用户的界面，随着绑定的增加，性能就会越来越低 在Angular中，这个做法被废弃掉了，首先数据绑定默认不再是双向数据绑定了，而是单向数据绑定，其次整个检查机制被完全重写，整体性能得到很大的提升 路由（非常简单的路由功能） ng-route中的ng-view指令只能有一个，不能嵌套多个视图 第三方模块ui-router也不是很灵活 在Angular中，路由作为核心模块之一，对其进行了很大的提升，可以说很强大 作用域 angularJS的作用域把它的执行环境和浏览器的环境隔离开，所有原生事件都不能影响它的作用域，都必须用带有ng开头的指令来交互，如果你想用原生事件，就必须调用$scope.$apply来告诉angularJS我的数据已经有更新了，你帮我同步去更新一些UI吧！ 这个问题，在Angular中也被解决掉了，$scope这个东西在Angular中不复存在，任何原生的事件都可以直接被响应及处理 表单验证 在angularJS中，显示表单验证的错误信息提示是比较薄弱的 在Angular中提供了全新的模板API，尤其是响应式表单，可以帮助我们实现功能复杂的校验，并且显示错误信息 Javascript语言 在Angular中使用typescript来开发，它是ES6规范的一个超集，带有完善的类型系统，这使得我们可以在编译阶段解决部分bug，从而使运行时的bug减少，还可以在IDE中获得更好的代码提示，及更快的性能 学习成本 学习angularJS成本高，需要掌握很多概念，包括模块、控制器、指令、作用域、模板、数据绑定、过滤器、依赖注入等等，你很难一下子说出它的核心到底是什么 而Angular的核心就是组件，剩下所有的东西，都是为组件服务的 Angular新特性 全新的命令行工具AngularCLI，它提供了很多方便的功能来帮我们进行开发，比如： 生成一个新项目的骨架 生成组件需要的基础代码 作为开发服务器，供我们调试、编译、构建并且部署我们的代码 运行自动化的单元测试 服务器端渲染 它可以使一个原本需要10s才能加载完的单页应用在1s之内呈现在用户面前 它可以使一个单页应用针对每一个视图去做SEO（搜索引擎优化），对单页应用它只有一个页面，所以要做SEO是一个很麻烦的事情，服务器端的渲染可以是这个效果大大的提升 移动和桌面兼容 Angular中对移动的支持提升到新的高度，借助Ionic、NativeScript结合Angular可以很容易的创建出跨平台的手机应用 Angular还提供一个官方的UI库，叫做Angular Material，提供移动应用和桌面应用通用UI组件 angularJS的架构 Angular的架构 模块：用来将应用中不同的部分组织成一个Angular框架可以理解的单元 组件：是Angular应用的基本构建快，你可以把一个组件理解为一段带有业务逻辑和数据的HTML 指令：允许你向HTML元素添加自定义行为 服务：用来封装可重用的业务逻辑 Angular的组件 与React对比 速度快（虚拟DOM）；只有在调用setState方法时，去更新DOM，而且还是先更新虚拟DOM，然后和实际的DOM比较，再更新实际的DOM，比起angularJS的绑定来说，更新DOM的次数少，且更新DOM的内容少 FLUX架构（Redux） 服务器渲染 与Vue对比 简单 只需一个.vue文件 灵活 vue-cli 性能 库很小 个人主导 只关注web 服务器渲染 依靠第三方 Angular 继承angularJS 吸收React]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端开源项目那些事]]></title>
    <url>%2F2018%2F06%2F22%2F%E5%89%8D%E7%AB%AF%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E9%82%A3%E4%BA%9B%E4%BA%8B%2F</url>
    <content type="text"><![CDATA[一、开源包含了什么 源码 文档，如二次开发文档和用户使用文档 开发环境，告诉二次开发者如何搭建和运行代码 允许他人贡献代码，而不是仅仅给别人阅读源码的权限 问题，用户提问，维护者答复，问题共享（而不是私聊） 问题列表和升级计划，记录当前问题，以及何时解决、何时升级 二、为何做开源？ 全面提高编程能力 你需要从0打造，每部分代码都需要自己负责，不像在公司中的一颗螺丝钉 提高自己的社区知名度 github上的star能间接的反映你的身价，它能让你得到业内认可。业内同行认可了，做啥事儿都好做，如内推工作。 锻炼自己的产品意识 因为做开源做的是产品，不再是单纯的技术活，UI、运维、推广、收集反馈、甚至成本预算，你都得考虑。 技术范儿、极客精神 作为一名程序猿，能业余打造一款开源产品是一件很帅的事情，满足自己的虚荣心。 三、做开源的一些期望 要快速做出第一版，至少能用。后面再慢慢迭代升级。 要能方便的推广使用，最好是0成本使用。 即做出来，推出去，要快。即，你做的快，别人用的也快。 四、不做什么 大型的框架，如做一个UI框架。短期做不完，使用成本高 模拟成熟轮子，如再造一个jQuery。有成熟方案，用户不会换 小众的东西。基本没人用 没有特色，100%的模仿。用户没有更换的理由 五、做什么 小而精的工具。开发快，使用成本低。 要有特色，哪怕是一个。要和别人不一样，差异化竞争。 一定要大众，50%以上的开发人员都会用到 避开已经被成熟产品垄断的领域。你就不要去跟jQuery vue React竞争了。 六、搭建开发环境初始化进入项目目录，然后命令行运行npm init，按照提示进行初始化即可。初始化完成后，项目根目录下会有package.json的文件。 规范版本号打开package.json文件，将版本号定义为&quot;version&quot;: &quot;0.0.1&quot;。以后我们每次正式提交代码，版本号都不一样。版本号分三级，分别为： 一级，重构版本 二级，重大功能改进 三级，小升级或者bug修复 为何从0.0.1开始？因为0.x.x可以认为是非正式版本、测试版，而从1.x.x开始，就是正式发布的版本了。 1234567891011121314151617&#123; ... "main": "./bin/kaiyu.js", "bin": &#123; "kaiyu": "./bin/kaiyu.js" &#125;, "repository": &#123; "type": "git", "url": "git+https://github.com/kaiyu5609/kaiyu-cli.git" &#125;, "author": "https://github.com/kaiyu5609/kaiyu-cli", "bugs": &#123; "url": "https://github.com/kaiyu5609/kaiyu-cli/issues" &#125;, "homepage": "https://github.com/kaiyu5609/kaiyu-cli#readme", ...&#125; 规范一级目录项目的一级目录要提前规范好，最起码一些常用的目录要提前订好留用，不能乱来。例如： src - 源代码 release - 发布结果 test - 单元测试用例 doc - 文档 example - 实例 构建工具webpack 安装插件npm i babel-core babel-loader babel-polyfill babel-preset-es2015 babel-preset-latest webpack webpack-cli --save-dev。 项目根目录下创建.babelrc文件，内容如： 1234&#123; "presets": ["es2015", "latest"], "plugins": []&#125; 项目根目录下创建webpack.config.js文件，内容如： 1234567891011121314module.exports = &#123; entry: './src/index.js', output: &#123; path: __dirname, filename: './release/bundle.js' &#125;, module: &#123; rules: [&#123; test: /\.js?$/, exclude: /(node_modules)/, loader: 'babel-loader' &#125;] &#125;&#125; 最后，修改package.json中的scripts，增加&quot;release&quot;: &quot;webpack&quot;。然后命令行运行npm run release，就可生成release内容。 简单的测试 在example文件夹中新建index.html，引入打包后的release下的bundle.js文件。 在package.json中的scripts，新增&quot;example&quot;: &quot;http-server -p 8880&quot;（注：先用npm安装http-server）。 然后命令运行npm run example。 浏览器访问http://localhost:8880/example/index.html。 规范git分支至少要存在两个分支，master和dev，dev是开发中的代码。当然，你可以规范更多的分支，例如next fix-bug等，但是要注意一个原则 —— 用不到的就先不要规划。 完善README.mdREADME.md是开源项目的一张脸，用户的第一印象。必须包含以下内容： 产品简介（此处要突出特点，打差异化竞争） 产品安装和下载 快速使用（详细的使用文档或者二次开发文档，外链即可） 交流提问区 关于作者（放你博客链接，和收款二维码） 七、提交代码写文档 &amp; 写测试用例注意，文档和测试用例对于一个开源产品来说非常重要！非常重要！非常重要！而且，文档和测试用例本身就是代码不可分割的一部分。 在写文档之前，还需要准备其他的工具。定位到项目目录下，npm i gitbook-cli -g安装gitbook，然后创建SUMMARY.md，内容如下：12345678# Summary* [项目介绍](README.md)* [使用文档](doc/use/README.md) * [使用1](doc/use/use1.md) * [使用2](doc/use/use1.md)* [二次开发](doc/dev/README.md) * [开发1](doc/dev/dev1.md) * [开发2](dov/dev/dev2.md) 运行gitbook init，会看到各个文件都被创建了，就可以完善各个文档的内容。内容完成之后，运行gitbook build可以将md文件发布为html文件，默认放在_book文件夹。启动了npm run example之后，可以访问http://localhost:8880/_book/查看效果。或者运行gitbook serve --port 8880之后，可以访问http://localhost:8880 最后，再次修改一下README.md，把文档的链接加上12[如何使用](./doc/use/README.md)[二次开发](./doc/dev/README.md) 提交第一版代码首先，修改一下.gitignore文件，加上一行_book，把打包出来的文件忽略掉。然后用之前的方式提交到github的master分支。123git add .git commit -m &apos;v0.0.1 初次提交&apos;git push origin master 接下来，创建tag并提交，代码如下：12git tag -a &apos;v0.0.1&apos; -m &apos;第一版本&apos;git push origin v0.0.1 提交之后，下载地址就有了，https://github.com/kaiyu5609/kaiyu-cli/releases这里可以下载到各个版本的源码。 最后要提交到npm上，能让使用者通过npm进行安装。首先，运行npm add user和npm login来登录，根据提示将你之前注册npm时的账号、密码、邮箱写上就行了，然后，在项目的根目录运行npm publish .，此时问题来了！！！CDN: http://unpkg.com/kaiyu-cli/release/bundle.js 运行之后可能会报了403错误，这种可能是重名导致的。 升级代码并提交在代码开发阶段的步骤总结如下： 来一个dev分支，不要在master分支开发 修改package.json版本号，按照之前既定的版本股则修改，不能乱改 修改代码、文档和测试用例 自测 将dev分支提交到远程 代码开发完成之后，提交的流程如下： 再次确认版本号，因为版本号非常重要 将dev合并到master，并提交master到远程 创建tag并提交到远程 提交到npm 切换到dev分支：123456789git branchgit checkout -b devgit add .git commit -m &quot;v0.0.2&quot;git push origin dev 将dev合并到master分支合并12345git checkout mastergit merge devgit push origin master 八、合并Pull Requests 检查别人提交的代码，如果要合并，则点击Merge pull request，接收别人贡献的代码 然后在本地拉取远程的代码git pull origin master，更新最新的代码]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL入门之基础数据管理与常用函数]]></title>
    <url>%2F2018%2F06%2F10%2FMySQL%E5%85%A5%E9%97%A8%E4%B9%8B%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E4%B8%8E%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[一、MySQL入门之基础数据管理与常用函数]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[则修之未雨绸缪]]></title>
    <url>%2F2018%2F05%2F30%2F%E5%88%99%E4%BF%AE%E4%B9%8B%E6%9C%AA%E9%9B%A8%E7%BB%B8%E7%BC%AA%2F</url>
    <content type="text"><![CDATA[请输入密码进行浏览。 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>则修</category>
      </categories>
      <tags>
        <tag>则修</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[则修之说话脉络]]></title>
    <url>%2F2018%2F05%2F29%2F%E5%88%99%E4%BF%AE%E4%B9%8B%E8%AF%B4%E8%AF%9D%E8%84%89%E7%BB%9C%2F</url>
    <content type="text"><![CDATA[请输入密码进行浏览。 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>则修</category>
      </categories>
      <tags>
        <tag>则修</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[则修之关键词]]></title>
    <url>%2F2018%2F05%2F29%2F%E5%88%99%E4%BF%AE%E4%B9%8B%E5%85%B3%E9%94%AE%E8%AF%8D%2F</url>
    <content type="text"><![CDATA[请输入密码进行浏览。 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>则修</category>
      </categories>
      <tags>
        <tag>则修</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[则修之理清思路]]></title>
    <url>%2F2018%2F05%2F28%2F%E5%88%99%E4%BF%AE%E4%B9%8B%E7%90%86%E6%B8%85%E6%80%9D%E8%B7%AF%2F</url>
    <content type="text"><![CDATA[请输入密码进行浏览。 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>则修</category>
      </categories>
      <tags>
        <tag>则修</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[则修之M3]]></title>
    <url>%2F2018%2F05%2F28%2F%E5%88%99%E4%BF%AE%E4%B9%8BM3%2F</url>
    <content type="text"><![CDATA[一、m3模型概览 #m3模型 ##搭讪吸引 ###A1打开组合 ####男人接近一个组合，执行开场白，并迅速被这个组合接受 ###A2女对男感兴趣 ####男方展示较高的价值，同时显示对目标没兴趣，她则以兴趣指标回应 ###A3男对女感兴趣 ####男方引诱女方在互动中投资更多，然后以兴趣指标奖励她的努力 ##建立舒适感（中场游戏） ###C1对话 ####两人分享友善的对话，培养舒适感和熟悉感 ###C2联系感 ####双方感到“来电”的悸动，发生接吻，这个阶段可能延续好几次约会 ###C3亲密感 ####现在是在诱惑的地点，继续发生激烈调情，双方进入卧房 ##诱惑（结尾游戏） ###S1前戏 ####两人开始往性交方向进展，如果太早发生，可能会引发事后反悔 ###S2LMR ####最后一刻的抵抗是性爱发生前的不归点，通常是女人临阵退缩的时刻 ###S3性交 ####必须发生几次性交以确保性关系 二、跟高情商女生的聊天案例 女方 男方 都互相加好友了，还不过来打个招呼 [无语] 又用这个角度看我，我都特么害羞了 [左哼哼] 小傲娇，屁股撅起来 真不要脸[左哼哼] [刀]应该给你一次血淋淋的教训 大半夜的，你要对我作甚 你猜 不猜，我害羞 😊不说，我害羞 [发呆]所以你要直接做也，我还没准备好 明天一定会困成狗[无奈] 你干嘛大半夜不睡觉 是不是在外面约 好吧，我就知道 你约吧，我睡觉 你这是要约我的节奏啊 孩子以后没有爸爸，只有妈妈 别惦记我们母子 我会好好抚养长大 [发呆]啥，你还要带孩子约我 告诉他他有一个负心的爸爸 你抱着别的姑娘睡吧 [发呆]宝宝我知道你单身多年，可这也太快了。我还不知道你的名字呢 宝宝就不告诉你 [发呆]你这是提了裤子就像走人，不走心啊 我不要 宝宝就是玩心上来了，宝宝从来不约 [发呆]名字你都不告诉我，至少丢100块略表心意啊 宝宝没有100块，请你吃个麻辣烫都够呛 你一定是经常约，都习惯不走心 原来你竟是这种人 走什么心，宝宝都是走胃的 嗯，我经常约，睡觉吧 来你出来，我要和你理论理论，用真理感化你 跟别人都约，就不跟你约 小屁孩不学好，套路我 [你别想套路我] [你这种人，在电视剧里最多活2集] [逗比的笑] [那天你在床上可不是这么说的] 你还想和我上床 [委屈] [咋地了] 你到底要干嘛，我孑然一身，只剩下自己的身子还值点钱 我就各应说话慢的，睡觉 睡觉睡觉 那你应该给我发语音 不要 你告诉我你这么晚还没睡你干嘛呢 晚上喝咖啡喝多了 再喝点酒就困了 不对，应该多喝热水 不喝酒 快告诉我你叫啥 阿冰 真名 宋冰 小冰冰 你？ 叫我欧巴 [得意] 真名 学我 [真名] 嗯 再学我，再学我就把你喝掉 [来，壮士，喝了这碗大姨妈] [表情] 你不工作么，还不睡 嗯，工作，可是睡不着 想约我，约不到，干着急，睡不着 卧槽还挺押韵 [你鸡鸡太小不要讲话] [你是多久没打炮憋成这样？] [小骚逼花样不少啊] 你是要对我走一遍套路么 [艹你妹的，忍你很久了] 真没劲 都不用套路你就想跟我走了 这就没劲了，一看就是约多了体质虚 嗯，我约的多，你别跟我说话了 你不要自暴自弃，现在回头还来得及，让欧巴用爱感化你 不玩了 要摊牌了嘛 摊毛线 我准备好了 如家房间521 不去，早点睡，晚安 记得多喝热水 根本睡不着 你到底想咋的，今天非得约我是么 睡觉 [咦…渣渣] [再不走就打死你] [你走] [立刻走] 好好唠嗑 你多大 我比一般女生都小，A都不到 别说话了 这么羞涩的问题都回答你了，还想咋的 你别说话了 我不，我傲娇 [拜拜] 你多大 [拜拜] 你做什么的 你哪里人 [拜拜] [拜拜] 有男朋友么 [拜拜] 毕业几年了 [拜拜] 有房有车么 [拜拜] 你看，聊正经的你就和我再见 [咒骂]本姑娘不约你，也不跟你相亲，把你的心放进肚子里 对你肯定没兴趣 行了吧 你看还傲娇上了 我不傲娇 我头一次看见比我还能装逼的人 本来你说行了吧之前我是相信的 [拜拜]没得聊了，没法说话了 我睡不着也要滚去睡觉 你说过好几次这句话了 你舍不得我 你现在睡一定会梦到我强奸你 [抓狂]我要崩溃了 你告诉我你到底想干嘛？ 梦里我对你干嘛可不负责 彻底崩溃了… 其实你还挺乖的 就是有点小俏皮 你真无聊 陪一个无聊的人这么久，这也是真爱了 嗯，那你赶紧奖励我个大红包 [假红包] 送来的路上被抢了 我拼命夺回来的一半 抠门 我还可以更抠的 [画的红包] 嗯，你扣吧 画的像不 嗯 你继续抠门 宝宝大方就好了 来给欧巴包个红包 我也抠门，跟你学的 [红包子] 那我们性格还蛮合的，可以玩到一起去 够吃不？ [红包子] [红包子] [红包子] 不够的话就 [来，壮士，喝了这碗大姨妈] 有空可得出来喝杯东西 不去 非得约么，慢慢来不好嘛 你别约我 我不约 叔叔我不约 人家还小，18还不到，你可别对我做什么，犯法哦 [发呆]我觉得你可以当我叔叔，你几岁 14虚岁 嗯， 早点睡，扯累了 就不睡 我饿了 女方 男方 [抠鼻] (先不理，到晚上有空再回) 宝宝 我在 在还不主动跟欧巴打个招呼 你都不爱我了 还跟你大招呼 咋不爱，我这么专一的欧巴 哼，周末问你去的那家都不告诉我 肯定是出去浪，泡妞了（吃醋了） 我微信都被盗了宝宝（有吸引后，这里就得解释了） 哼 谁信呢 你看我朋友圈了嘛 没有 搞得我现在只能用[发呆]这个表情证明我了 [难过] 你不爱我 干嘛这个表情，宝宝我昨天都焦虑死了，微信登录不上（这里就不用继续解释了） 你不爱我 [发呆]宝宝 嗯？（发个问好，她在等你解释） 嗯啥，老夫老妻了 [尴尬] 害羞什么，我又不会吃了你 那谁知道了 看来你竟让被人物色呀（我本来是喜欢你的，但是你为什么把我往外推呢） 你不想跟我说话就别说了 我不想跟你说话我早不回了（给她一些可得性） 那就好好说 我也没求你跟我说话 什么叫好好说 你多大？ 你做什么工作？ 你什么星座？ 你是哪里人？ 95年 你有没有男朋友？ 金融 天蝎 单身 河北 看来你喜欢这样的聊天模式 你问了我就回答了（一开始只能问到名字，其他她不愿意回答；现在这个特殊性叫：社交红利） 原来你这么乖，为什么我才发现[可怜] 无关紧要的事情 可以回答 所以什么是重要的 重要，我心情 没明白 我情绪多样 喜怒无常 难怪单身多年[偷笑] 嗯， 单身没什么不好 你是不是特没安全感（单刀直入，要跟女生走心） 嗯 所有人都觉得我身边的暧昧关系错综复杂 看来也确实是这样（还是不能释怀） 所以你是一个专一的人么？（废测） 你觉得是么？ 我觉得每个人都可以是专一的人（我觉得每个人遇到对的人都可以是专一的人） 模棱两可（用一个词把这句话盖了） 嗯 我对自己一直都是专一的 你自恋啊你 哈哈 你是不是觉得如果自己都不爱自己，就没办法爱这个世界，没办法爱自己的家人，更没办法好好爱欧巴了 嗯，不管什么时候，自己都该冷静的思考。对自己有用的东西，包括会伤害到自己的东西 我觉得你在用鸡汤给我洗脑[破涕为笑] 是你没事就套路我，我就不能给你洗洗脑了（她在积极回答我们的问题，进入我们的框架） 你要怎么洗，你要对我做什么[恐惧]（反框架） 你猜 我不，我傲娇，我狮子座的，会告诉我 你是狮子座还是傻子座（我对你有意思，你到底是真傻还是装傻，竟然不懂我的心） 快说，你到底要对我干嘛 哈哈 就不说 是不是我问你什么，你都要和我反抗一下（套路一下） 心情好就愿意跟你玩会 我真的要打你了 快说 不干嘛（在做最后的抵抗） 收了你 是不是太快了，我还有点害羞（推一下，她快我们就慢，她慢我们就快，保持一致性） 那不收了 我跟你走心，你竟然只想跟我约一发（暗示女生，我们是不约炮的） 那没准是约一辈子（暴露需求感，你只要给我一点可得性，只要给我一点点安全感，我就是你的；这里我们退她就进） 什么时候有空，出来和一杯吧（窗口很大，开始模糊邀约） 我不喝酒（ASD） 果汁也OK（破解她的ASD） 嗯 聊聊天嘛，又不说给你灌多了 你不懂 我出门，工体什么的，能躲就躲，躲不过就抿一点点 可能连一场下来我连一大口都没喝够（高情商的女生，并不是说很随便的女生） 你喝多会变身吗😂 不安全 😂喝果汁吧，再让你喝酒搞得我像流氓似的 嗯 我还是喜欢喝甜的 OK啊，没问题，你在哪 现在？ 周末晚上也OK啊。 这个周末要去石家庄看妹妹 那下周咯，我们慢慢来，来日方长[机智]（我不是搞短期的，慢增加的安全感，根基更稳） 额 怎么啦 没事 你这句话好容易让人误会（她又在寻求可得性、安全感） 你不想吗（我们要引导她说出她自己的想法，不暴露需求感，就要逼她说出自己的想法） 这… 怎么了？ 没事 吞吞吐吐，不像你啊🙄 没有没有 所以你到底想干嘛 啥都不想 多喝热水！ 我怕我今天见了你，你套路我（说白了她今天就想见这个男生） … 尼玛 我还怕你套路我呢。 哈哈哈 你多大 我不是说过么，我比一般女孩子都小，我连A都不到 … 你又不正经 我问你几岁 好吧，欧巴91年的。 比我大 不然你喜欢小弟弟么😄 那倒没有 倒是觉得你还小 😂你又没有见过。 怎么知道小 … 😂所以宝宝什么时候回北京 就两天]]></content>
      <categories>
        <category>则修</category>
      </categories>
      <tags>
        <tag>则修</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL入门之初识数据库操作]]></title>
    <url>%2F2018%2F05%2F22%2FMySQL%E5%85%A5%E9%97%A8%E4%B9%8B%E5%88%9D%E8%AF%86%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[一、MySQL基础之数据类型与表的管理 什么是数据库？ 数据库 Database 是按照数据结构来组织、存储和管理数据的仓库 常见的数据库 Oracle DB2 SQL Server Postgre SQL MySQL 相关术语 数据库系统：DBS（Database System） 包括数据库：DB（Database） 数据库管理系统：DBMS（Database Management System） 应用开发工具 管理员及用户 SQL语言：Structured Query Language 结构化查询语言，包括 数据定义语言：DDL 数据操作语言：DML 数据查询语言：DQL 数据控制语言：DCL MySQL相关操作 登录/退出MySQL 配置文件 my.cnf是MySQL的配置文件 登录MySQL mysql -uroot -p mysql -uroot -proot（密码为root） 查看MySQL版本 mysql -V mysql --version 登录的同时打开指定数据库 mysql -uroot -p -D db_name 退出MySQL exit quit 登录信息中需要掌握的 命令行结束符默认使用;或者\g来结束 可以通过help或者\h或者?加上相关关键字来查看手册 \c可以取消当前命令的执行 SQL语句语法规范 常用MySQL的关键字我们需要大写，库名、表名、字段名称等使用小写 SQL语句支持折行操作，拆分的时候不能把完整单词拆开 数据库名称、表名称、字段名称不要使用MySQL的保留字，如果必须要使用，需要用反引号``将其括起来 常用SQL语句 12345678910111213141516-- 1.获取登录的用户SELECT USER();-- 2.获取MySQL的版本信息SELECT VERSION();-- 3.获取当前的日期时间SELECT NOW();-- 4.获取当前打开的数据库SELECT DATABASE();-- 5.查看上一步操作产生的警告信息SHOW WARNINGS;-- 6.MySQL的注释：`#`或者`--` 数据库相关操作 创建数据库 12345678910-- 1.CREATE &#123;DATABASE|SCHEMA&#125; db_name;-- 2.检测数据库名称是否存在，不存在则创建CREATE DATABASE [IF NOT EXISTS] db_name;-- 3.在创建数据库的同时指定编码方式CREATE DATABASE [IF NOT EXISTS] db_name [DEFAULT] CHARACTER SET [=] charset;-- 4.注意：数据库名称最好有意义；名称不能包含特殊字符或者是MySQL关键字 查看当前服务器下全部数据库 1SHOW DATABASES|SCHEMAS; 查看指定数据库的详细信息 1SHOW DREATE DATABASE db_name; 修改指定数据库的编码方式 1ALTER DATABASE db_name [DEFAULT] CHARACTER SET [=] charset; 打开指定数据库 1USE db_name; 获取当前打开的数据库 1234SELECT DATABASE();-- 或者SELECT SCHEMA(); 删除指定数据库 1234DROP DATABASE db_name;-- 删除存在的数据库DROP DATABASE [IF EXISTS] db_name; 数据表相关操作 数据表 是数据库最重要的组成部分之一，数据是保存在数据表中 数据表由行row和列column来组成 每个数据表中至少有一列，行可以有零行一行或者多行组成 表名要求唯一，不要包含特殊字符，最好含义明确 创建数据表 12345CREATE TABLE [IF NOT EXISTS] tbl_name ( 字段名称 字段类型 [完整性约束条件], 字段名称 字段类型 [完整性约束条件], ...) ENGINE=存储引擎 CHARSET=编码方式; 完整性约束条件 查看当前数据库下已有数据表 1234SHOW TABLES;-- 或者SHOW [FULL] TABLES [&#123; FROM | IN &#125; db_name] [LIKE 'pattern' | WHERE expr]; 查看指定数据表的详细信息 1SHOW CREATE TABLE tbl_name; 查看表结构 12345DESC tbl_name;DESCRIBE tbl_name;SHOW COLUMNS FROM tbl_name; 删除指定的数据表 1DROP TABLE [IF EXISTS] tbl_name; 表结构相关操作 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748-- 添加字段ALTER TABLE tbl_name ADD 字段名称 字段属性 [完整性约束条件][FIRST|AFTER字段名称];-- 删除字段ALTER TABLE tbl_name DROP 字段名称;-- 添加默认值ALTER TABLE tbl_name ALTER 字段名称 SET DEFAULT 默认值;-- 删除默认值ALTER TABLE tbl_name ALTER 字段名称 DROP DEFAULT;-- 修改字段类型、字段属性ALTER TABLE tbl_name MODIFY 字段名称 字段类型[字段属性][FIRST|AFTER字段名称];-- 修改字段名称、字段类型、字段属性ALTER TABLE tbl_name CHANGE 原字段名称 新字段名称 字段类型 字段属性[FIRST|AFTER字段名称];-- 添加主键ALTER TABLE tbl_nameADD PRIMARY KEY(字段名称);-- 删除主键(如果字段属性带有AUTO_INCREMENT，则会删不掉；因此得先去掉该属性后才可删掉)ALTER TABLE tbl_nameDROP PRIMARY KEY;-- 添加唯一ALTER TABLE tbl_nameADD UNIQUE KEY|INDEX [index_name](字段名称);-- 删除唯一ALTER TABLE tbl_nameDROP INDEX index_name;-- 修改数据表名称ALTER TABLE tbl_nameRENAME [TO|AS] new_tbl_name;-- 或者RENAME TABLE tbl_name TO new_tbl_name;-- 修改AUTO_INCREMENT的值ALTER TABLE tbl_name AUTO_INCREMENT=值; MySQL中的数据类型 数值型 整数型 浮点数 定点数 字符串类型 日期时间类型 MySQL存储引擎 MyISAM存储引擎 默认MyISAM的表会在磁盘中产生3个文件 .frm（表结构文件） .MYD（数据文件） .MYI（索引文件） 可以在创建表的时候指定数据文件和索引文件的存储位置，只有MyISAM表支持 DATA DIRECTORY [=] 数据文件保存的绝对路径 INDEX DIRECTORY [=] 索引文件保存的绝对路径 MyISAM单表最大支持的数据量2的64次方条记录 每个表最多可以创建64个索引 如果是复合索引，每个复合索引最多包含16个列，索引值最大长度是1000B MyISAM引擎的存储格式 定长（FIXED静态）：是指字段中不包含VARCHAR/TEXT/BLOB 动态（DYNAMIC）：只要字段中包含了VARCHAR/TEXT/BLOB 压缩（COMPRESSED）：需要myisampack来创建 InnoDB存储引擎 设计遵循ACID模型，支持事务，具有从服务崩溃中恢复的能力，能够最大限度保护用户的数据 原子性（Atomiocity） 一致性（Consistency） 隔离性（Isolation） 持久性（Durability） 支持行级锁，可以提升多用户并发时的读写性能 支持外键，保证数据的一致性和完整性 InnoDB拥有自己独立的缓冲池，常用的数据和索引都在缓存中 对于INSERT、UPDATE、DELETE操作，InnoDB会使用一种change buffering的机制来自动优化，还可以提供一致性的读，并且还能缓存表更的数据，减少磁盘I/O，提高性能 创建InnoDB表之后会产生两个文件 .frm（表结构文件） .ibd（数据和索引存储表空间中） 所有的表都需要创建主键，最好是配合上AUTO_INCREMENT，也可以放到经常查询的列作为主键 MySQL数据库操作 添加记录 123456789101112131415161718INSERT [INTO] tbl_name[(col_name,...)] &#123;VALUE|VALUES&#125;(VALUES...);-- 不指定字段名称（需要按照建表时的字段顺序给每一个字段赋值）INSERT tbl_name VALUE(value...);-- 列出指定字段INSERT tbl_name(字段名称,...) VALUES(值,...);-- INSERT ... SET的形式INSERT tbl_name SET 字段名称=值,...;-- INSERT ... SELECT的形式INSERT tbl_name[(字段名称...)] SELECT 字段名称,...FROM tbl_name [WHERE 条件];-- 一次添加多条记录INSERT tbl_name[(字段名称,...)] VALUES(值,...),(值,...),(值,...); 修补记录 123UPDATE tbl_name SET 字段名称=值,字段名称=值[WHERE 条件];-- 如果不添加条件，整个表中的记录都会被更新 删除记录 12345678DELETE FROM tbl_name [WHERE 条件];-- 如果不添加条件，整个表中的记录都会被删除-- DELETE清空数据表的时候不会重置AUTO_INCREMENT的值，可以通过ALTER语句将其重置为1-- 彻底清空数据表（1.清除表中所有记录；2.会重置AUTO_INCREMENT的值）TRUNCATE [TABLE] tbl_name; 查询记录 1234567891011121314151617181920212223SELECT select_expr,... FROM tbl_name[WHERE 条件][GROUP BY &#123;col_name|position&#125; HAVING 二次筛选][ORDER BY &#123;col_name|position&#125; [ASC|DESC]][LIMIT 限制结果集的显示条数]-- 查询表中所有记录（*：所有字段）SELECT * FROM tbl_name;-- 指定字段的信息SELECT 字段名称,... FROM tbl_name;-- 库名.表名SELECT 字段名称,... FROM db_name.tbl_name;-- 给字段起别名SELECT 字段名称[AS]别名名称,... FROM db_name.tbl_name;-- 给数据表起别名SELECT 字段名称,... FROM tbl_name[AS]别名名称;-- 表名.字段名称SELECT tbl_name.col_name,... FROM tbl_name; WHERE条件 会筛选出符合条件的记录 比较运算符：&gt;、&gt;=、&lt;、&lt;=、!=、&lt;&gt;、&lt;=&gt; &lt;=&gt;和= 的区别：&lt;=&gt;可以检测NULL值 IS [NOT] NULL：检测值是否为NULL或者NOT NULL 指定范围：[NOT] BETWEEN ... AND 指定集合：[NOT] IN(值,...) 逻辑运算符 AND（逻辑与） OR（逻辑或） 匹配字符 [NOT] LIKE %（任意长度的字符串） _（任意一个字符） GROUP BY分组 把值相同放到一个组中，最终查询出的结果只会显示组中一条记录 分组配合GROUP_CONCAT()查看组中某个字段的详细信息 配合聚合函数使用 COUNT()（统计记录总数） 如果写的是COUNT(字段名称)，字段中的值为NULL是不统计进来 如果写的是COUNT(*)会统计NULL值 SUM()（求和） MAX()（求最大值） MIN()（求最小值） AVG()（求平均值） 配合WITH ROLLUP关键字使用 会在记录末尾添加一条记录，是上面所有记录的总和 可以通过字段来进行分组，也可以通过index来进行分组 HAVING子句对分组结果进行二次筛选 COUNT(*) &gt;= 3 或者 COUNT(*)的别名 &gt;= 3 12345678910111213141516171819202122232425262728-- 按照性别分组，查询组中的用户名有哪些SELECT GROUP_CONCAT(username),age,sex,addr FROM user GROUP BY sex;-- 按照addr分组，得到用户名的详情，总人数，得到组中年龄的总和，年龄的最大值、最小值、平均值SELECT addr,GROUP_CONCAT(username) AS userDetail,COUNT(*) AS totalUsers,SUM(age) AS sumAge,MAX(age) AS maxAge,MIN(age) AS minAge,AVG(age) as avgAgeFROM userGROUP BY addr;-- WITH ROLLUPSELECT GROUP_CONCAT(username) AS userDetail,COUNT(*) AS totalUsersFROM userGROUP BY sexWITH ROLLUP;-- HAVING子句对分组结果进行二次筛选SELECT addr,GROUP_CONCAT(username) AS userDetail,COUNT(*) AS totalUsersFROM userGROUP BY addrHAVING totalUsers &gt;= 3; ORDER BY排序 ORDER BY 字段名称 ASC|DESC LIMIT限制结果集显示条数 LIMIT 值：显示结果集的前几条记录 LIMIT offset,row_count：从offset开始，显示几条记录 多表查询 笛卡尔积的形式 内连接的形式 查询两个表中符合连接条件的记录 SELECT 字段名称,... FROM tbl_name1 INNER JOIN tbl_name2 ON 连接条件; 外链接的形式 左外连接 SELECT 字段名称,... FROM tbl_name1 LEFT OUTER JOIN tbl_name2 ON 条件; 先显示左表中的全部记录，再去右表中查询符合条件的记录，不符合的以NULL代替（以左表为主） 右外连接 SELECT 字段名称,... FROM tbl_name1 RIGHT OUTER JOIN tbl_name2 ON 条件; 先显示右表中的全部记录，再去左表中查询符合条件的记录，不符合的以NULL代替（以右表为主） 1234567891011121314151617181920-- 笛卡尔积（两层循环）SELECT emp.id,emp.username,emp.age,dep.depName FROM emp,dep;-- 内连接的形式SELECT e.id,e.username,e.age,d.depNameFROM emp AS eINNER JOIN dep AS dON e.depId=d.id;-- 左外链接的形式（可以省略 OUTER）SELECT e.id,e.username,e.age,d.depNameFROM emp AS eLEFT OUTER JOIN dep AS dON e.depId=d.id;-- 右外链接的形式（可以省略 OUTER）SELECT e.id,e.username,e.age,d.depNameFROM emp AS eRIGHT OUTER JOIN dep AS dON e.depId=d.id; 数据表的创建 12345678910111213141516171819202122232425262728-- 创建kaiyu表CREATE DATABASE IF NOT EXISTS fengche DEFAULT CHARACTER SET 'UTF8';-- 打开kaiyu表USE kaiyu-- 用户表 userCREATE TABLE IF NOT EXISTS user ( id INT, username VARCHAR(20), password CHAR(32), emial VARCHAR(50), age TINYINT, card CHAR(18), tel CHAR(11), salary FLOAT(8,2), married TINYINT(1), addr VARCHAR(100), sex ENUM('男', '女', '保密')) ENGINE=INNODB CHARSET=UTF8;-- INSERT [INTO] tbl_name(id,username,...) VALUES(1,'dhuang',...);-- 向user表中插入一条记录INSERT user(id,username,password,email,age,card,tel,salary,married,addr,sex)VALUES(1,'dhuang','123456','154298331@qq.com',24,'194958683948235864','15829341542',88888.68,0,'深圳','男');-- 查询表中所有记录SELECT * FROM tbl_name; 测试插入的数据 整型 超过会被截断 浮点型 DECIMAL[(M,D)]，小数位D不指定，则会截断为整型 字符串类型 CHAR效率高于VARCHAR，CHAR相当于拿空间换时间，VARCHAR拿时间换空间 CHAR默认存储数据的时候，后面会用空格填充到指定长度，而检索的时候会去掉后面的空格；VARCHAR在保存数据的时候不进行填充，尾部的空格会留下 TEXT列不能有默认值，检索的会后不存在大小写转换 枚举类型插入序号也是可以的，如：ENUM(&#39;男&#39;, &#39;女&#39;, &#39;保密&#39;)，则男对应的序号是1；枚举类型会自动过滤掉空格。 完善用户表user 12345678910111213CREATE TABLE IF NOT EXISTS `user`( `id` INT UNSIGNED AUTO_INCREAMENT KEY COMMENT '用户编号', `username` VARCHAR(20) NOT NULL UNIQUE COMMENT '用户名', `password` CHAR(32) NOT NULL COMMENT '密码', `email` VARCHAR(50) NOT NULL UNIQUE COMMENT '邮箱', `age` TINYINT UNSIGNED NOT NULL DEFAULT 18 COMMENT '年龄', `sex` ENUM('男', '女', '保密') NOT NULL DEFAULT '保密' COMMENT '性别', `tel` CHAR(11) NOT NULL UNIQUE COMMENT '电话', `addr` VARCHAR(50) NOT NULL DEFAULT '深圳' COMMENT '地址', `card` CHAR(18) NOT NULL UNIQUE COMMENT '身份证号', `married` TINYINT(1) NOT NULL DEFAULT 0 COMMENT '0代表未婚，1代表已婚', `salary` FLOAT(8,2) NOT NULL DEFAULT 0 COMMENT '薪水') ENGINE=INNODB DEFAULT CHARSET=UTF8;]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java入门之集合框架]]></title>
    <url>%2F2018%2F05%2F01%2FJava%E5%85%A5%E9%97%A8%E4%B9%8B%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%2F</url>
    <content type="text"><![CDATA[一、集合框架 概念 现实生活中：很多的事物凑在一起 数学中的集合：具有共同属性的事物的总体 Java中的集合类：是一种工具类，就像是容器，存储任意数量的具有共同属性的对象 作用 在类的内部，对数据进行组织； 简单而快速的搜索大数量的条目； 有的集合接口，提供了一系列排列有序的元素，并且可以在序列中间快速的插入或者删除有关元素； 有的集合接口，提供了映射关系，可以通过关键字(key)去快速查找到对应的唯一对象，而这个关键字可以是任意类型。 集合与数组的对比 —— 为何选择集合而不是数组 数组的长度是固定的，集合的长度是可变的 数组只能通过下标访问元素，类型固定，而有的集合可以通过任意类型查找所映射的具体对象 体系结构 Collection Map 二、Collection接口、子接口以及实现类 Collection接口 是List、Set和Queue接口的父接口 定义了可用于操作List、Set和Queue的方法 —— 增删改查 List接口及其实现类 —— ArrayList List是元素有序并且可以重复的集合，被称为序列 List可以精确的控制每个元素的插入位置，或删除某个位置元素 ArrayList —— 数组序列，是List的一个重要实现类 ArrayList底层是由数组实现的 三、List实现功能 —— 模拟学生选课功能 选择课程（往List中添加课程） 12345678910package com.fengche.collection;public class Course &#123; public String id; public String name; public Course(String id, String name) &#123; this.id = id; this.name = name; &#125;&#125; 1234567891011121314package com.fengche.collection;import java.util.Set;import java.util.HashSet;public class Student &#123; public String id; public String name; public Set courses; public Student(String id, String name) &#123; this.id = id; this.name = name; this.courses = new HashSet(); &#125;&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960package com.fengche.collection;import java.util.List;import java.util.ArrayList;public class ListCourses &#123; /** * 用于存放备选课程的List */ public List selCourses; public ListCourses() &#123; this.selCourses = new ArrayList(); &#125; /** * 用于往selCourses中添加备选课程 */ public void addCourse() &#123; // 1. 创建一个课程对象，并通过调用add方法，添加到备选课程List中 Course course1 = new Course("1", "数据结构"); selCourses.add(course1); Course c1 = (Course)selCourses.get(0); System.out.println("添加了课程:" + c1.id + ":" + c1.name); // 2. 另一种添加方式 Course course2 = new Course("2", "C语言"); selCourses.add(0, course2); Course c2 = (Course)selCourses.get(0); System.out.println("添加了课程:" + c2.id + ":" + c2.name); // 3. 以下方法会抛出数组下标越界 // Course course3 = new Course("3", "Test"); // selCourses.add(4, course3); // 4. addAll的添加方式 Course[] courses1 = &#123;new Course("3", "离散数学"), new Course("4", "汇编语言")&#125;; selCourses.addAll(Arrays.asList(courses1)); Course c3 = (Course)selCourses.get(2); Course c4 = (Course)selCourses.get(3); System.out.println("添加了课程:" + c3.id + ":" + c3.name + ";" + c4.id + ":" + c4.name); // 5. addAll的另一种添加方式 Course[] courses2 = &#123;new Course("5", "高等数学"), new Course("6", "大学英语")&#125;; selCourses.addAll(2, Arrays.asList(courses2)); Course c5 = (Course)selCourses.get(2); Course c6 = (Course)selCourses.get(3); System.out.println("添加了课程:" + c5.id + ":" + c5.name + ";" + c6.id + ":" + c6.name); &#125; public static void main(String[] args) &#123; ListCourses listCourses = new ListCourse(); listCourses.addCourse(); &#125;&#125; 查看所选课程（遍历List中的元素） 1234567891011121314151617181920212223242526package com.fengche.collection;import java.util.List;import java.util.ArrayList;import java.util.Iterator;public class ListCourses &#123; // ... // 通过迭代器来遍历List public void iteratorCourse() &#123; // 通过集合的iterator方法，取得迭代器的实例 Iterator it = selCourses.iterator(); while (it.hasNext()) &#123; Course c = (Course)it.next(); System.out.println("课程:" + c.id + ":" + c.name); &#125; &#125; public static void main(String[] args) &#123; ListCourses listCourses = new ListCourse(); listCourses.addCourse(); listCourses.iteratorCourse(); &#125;&#125; 123456789101112131415161718192021222324252627package com.fengche.collection;import java.util.List;import java.util.ArrayList;import java.util.Iterator;public class ListCourses &#123; // ... // 通过for each方法访问集合元素 public void forEachCourse() &#123; // 通过集合的iterator方法，取得迭代器的实例 for (Object obj:selCourses) &#123; Course c = (Course)obj; System.out.println("课程:" + c.id + ":" + c.name); &#125; &#125; public static void main(String[] args) &#123; ListCourses listCourses = new ListCourse(); listCourses.addCourse(); // ... listCourses.forEachCourse(); &#125;&#125; 修改所选课程（修改List中的元素） 1234567891011121314151617181920212223package com.fengche.collection;import java.util.List;import java.util.ArrayList;import java.util.Iterator;public class ListCourses &#123; // ... public void modifyCourse() &#123; selCourses.set(4, new Course("7", "毛概")); &#125; public static void main(String[] args) &#123; ListCourses listCourses = new ListCourse(); listCourses.addCourse(); // ... listCourses.modifyCourse(); listCourses.forEachCourse(); &#125;&#125; 删除所选的某门课程（删除List中的元素） 12345678910111213141516171819202122232425package com.fengche.collection;import java.util.List;import java.util.ArrayList;import java.util.Iterator;public class ListCourses &#123; // ... public void removeCourse() &#123; Course c = (Course)selCourses.get(4); selCourses.remove(c); // or: selCourses.remove(4); &#125; public static void main(String[] args) &#123; ListCourses listCourses = new ListCourse(); listCourses.addCourse(); // ... listCourses.removeCourse(); listCourses.forEachCourse(); &#125;&#125; 123456789101112131415161718192021222324package com.fengche.collection;import java.util.List;import java.util.ArrayList;import java.util.Iterator;public class ListCourses &#123; // ... public void removeAllCourse() &#123; Course[] courses = &#123;(Course)selCourses.get(4), (Course)selCourses.get(5)&#125;; selCourses.removeAll(Array.asList(courses)); &#125; public static void main(String[] args) &#123; ListCourses listCourses = new ListCourse(); listCourses.addCourse(); // ... listCourses.removeAllCourse(); listCourses.forEachCourse(); &#125;&#125; 判断List中是否包含某个元素 12345678910111213141516171819202122232425262728package com.fengche.collection;import java.util.List;import java.util.ArrayList;import java.util.Iterator;public class ListCourses &#123; // ... public void containsCourse() &#123; // 取得备选课程序列的第0个元素 Course course = selCourses.get(0);// selCourses 假设已应用泛型，这里不用强转类型 // 打印输出selCourses是否包含course对象 System.out.println("备选课程中是否包含课程：" + course.name + "," + selCourses.contains(course));// true // 创建一个新的课程对象，ID和名称，与course对象完全一样 Course course2 = new Course(course.id, course.name); System.out.println("备选课程中是否包含课程：" + course2.name + "," + selCourses.contains(course2));// false &#125; public static void main(String[] args) &#123; ListCourses listCourses = new ListCourse(); listCourses.addCourse();// 除了addCourse方法，其他都注释掉 listCourses.containsCourse(); &#125;&#125; 判断List中是否包含某属性相同的元素，如对比元素的name是否相同 contains内部的实现原理，其实是遍历集合，然后调用equals方法进行对比的，所以我们可以重写equals方法来实现。 123456789101112131415161718192021222324252627282930313233343536373839package com.fengche.collection;public class Course &#123; public String id; public String name; public Course(String id, String name) &#123; this.id = id; this.name = name; &#125; public Course() &#123; &#125; @Override public boolean equals(Object obj) &#123; if (this == obj) &#123; return true; &#125; if (obj == null) &#123; return false; &#125; if (!(obj instanceof Course)) &#123; return false; &#125; Course course = (Course) obj; if (this.name == null) &#123; if (course.name == null) &#123; return true; &#125; else &#123; return false; &#125; &#125; else &#123; if (this.name.equals(course.name)) &#123; return true; &#125; else &#123; return false; &#125; &#125; &#125;&#125; 使用indexOf方法取得某元素在集合中的索引位置 实现List集合的排序（TODO） 四、泛型 上文List集合中，我们一直添加的是课程类，如果期间我们往该集合中添加一些奇怪的东西，比如说字符串，则会抛出ClassCastException异常；原因很简单，我们在遍历集合，将里面的Object类型元素强转成课程类型，突然遇到字符串类型的元素，把它进行强转的话就会很容易的抛出这个异常了。又没有一种方法可以控制我往某个集合中添加元素的类型呢？这就需要用到一个重要的知识：泛型。 集合中的元素，可以是任意类型的对象（对象的引用） 如果把某个对象放入集合，则会忽略他的类型，而把他当做Object处理 泛型则是规定了某个集合只可以存放特定类型的对象 会在编译期间进行类型检查 可以直接按指定类型获取集合元素 示例 12345678910111213141516171819202122232425262728293031323334package com.fengche.collection;import java.util.List;public class ListGeneric &#123; // 带有泛型 —— Course的List类型属性 public List&lt;Course&gt; courses; public void ListGeneric() &#123; this.courses = new ArrayList&lt;Course&gt;(); &#125; public void addCourse() &#123; Course course1 = new Course("1", "大学语文"); courses.add(course1); // 这里则在编译时，抛出错误；泛型集合中，不能添加泛型规定的类型及其子类型以外的对象，否则会把报错！ courses.add("能否添加一些奇怪的东西呢？"); Course course2 = new Course("2", "Java基础"); courses.add(course2); &#125; public forEachCourse() &#123; for (Course course:courses) &#123;// 这里就不用强转类型了 System.out.println(course.id + ":" + course.name); &#125; &#125; public static void main(String[] args) &#123; ListGeneric listGeneric = new ListGeneric(); listGeneric.addCourse(); listGeneric.forEachCourse(); &#125;&#125; 泛型集合可以添加泛型的子类型的对象实例 比如：ChileCourse继承Course，那么ChileCourse的实例也是可以添加到泛型为Course的List集合中去。 泛型集合中的限定类型不能使用基本数据类型；可以通过使用包装类限定允许存入的基本数据类型。 五、Set接口及其实现类 —— HashSet Set是元素无序并且不可以重复的集合，被称为集 HashSet —— 哈希集，是Set的一个重要实现类 Set案例功能，提供备选课程 创建学生对象，并给该学生添加三门课程（添加在学生的courses —— Set类型的属性中） 显示备选课程 循环三次，每次输入课程ID 往学生的courses属性中添加与输入的ID匹配的课程 输出学生选择的课程 六、Set案例功能 修改上文定义学生类选课的泛型 1234567891011121314package com.fengche.collection;import java.util.Set;import java.util.HashSet;public class Student &#123; public String id; public String name; public Set &lt;Course&gt; courses; public Student(String id, String name) &#123; this.id = id; this.name = name; this.courses = new HashSet&lt;Course&gt;(); &#125;&#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546package com.fengche.collection;import java.util.Set;import java.util.HashSet;import java.util.ArrayList;public class SetCourses &#123; public List&lt;Course&gt; selCourses; public SetCourses() &#123; selCourses = new ArrayList&lt;Course&gt;(); &#125; // public void addCourse() &#123;&#125; // 同上文 ListCourses 的方法 public static void main(String[] args) &#123; SetCourses setCourses = new SetCourses(); setCourses.addCourse(); setCourses.forEachCourse(); Student student = new Student("1", "小明"); Scanner scanner = new Scanner(System.in); for (int i = 0; i &lt; 3; i++) &#123; System.out.println("请输入课程ID"); String courseId = scanner.next(); for (Course course : setCourses.selCourses) &#123; if (course.id.equals(courseId)) &#123; // Set中，添加某个元素，无论添加多少次，最终只会保留一个该对象（的引用），并且保留的是第一次添加的那一个 student.courses.add(course); &#125; &#125; &#125; setCourses.forEachStudentSet(student); &#125; public void forEachStudentSet(Student student) &#123; // 打印输出，学生所选的课程！ for (Course course : student.courses) &#123; System.out.println("选择了课程:" + course.id + ":" + course.name); &#125; &#125;&#125; 判断Set中是否包含某元素 123456789101112131415161718192021222324252627282930package com.fengche.collection;import java.util.Set;import java.util.HashSet;import java.util.ArrayList;public class SetCourses &#123; public List&lt;Course&gt; selCourses; public SetCourses() &#123; selCourses = new ArrayList&lt;Course&gt;(); &#125; // public void addCourse() &#123;&#125; // 同上文 ListCourses 的方法 public static void main(String[] args) &#123; // 这部分内容，同上 // ... // Set的contains方法 Course course = new Course(); course.name = "离散数学"; System.out.println("备选课程中是否包含课程：" + course.name + "," + student.courses.contains(course));// 这里返回的是：false &#125; // public void forEachStudentSet // 同上&#125; 这里返回的是：false；因为这里使用的是HashSet去实现的Set接口，所以这就得看HashSet的contains它的实现机制了。 Object不仅定义了equals方法，还有hashCode方法，它返回的是对象哈希码的值 当调用HashSet的contains方法时，它是先调用hashCode方法来返回哈希码，如果哈希码相等的情况下，再调用equals方法，只有这两个方法所返回的值都相等的情况下，才认定这个HashSet包含某个元素 重写hashCode和equals方法： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546package com.fengche.collection;public class Course &#123; public String id; public String name; public Course(String id, String name) &#123; this.id = id; this.name = name; &#125; public Course() &#123; &#125; @Override public int hashCode() &#123; final int prime = 31; int result = 1; result = prime * result + ((name == null) ? 0 : name.hashCode()); return result; &#125; @Override public boolean equals(Object obj) &#123; if (this == obj) &#123; return true; &#125; if (obj == null) &#123; return false; &#125; if (!(obj instanceof Course)) &#123; return false; &#125; Course course = (Course) obj; if (this.name == null) &#123; if (course.name == null) &#123; return true; &#125; else &#123; return false; &#125; &#125; else &#123; if (this.name.equals(course.name)) &#123; return true; &#125; else &#123; return false; &#125; &#125; &#125;&#125; 再运行以上程序，则返回的是：true。 七、Map和HashMap Map接口 Map提供了一种映射关系，其中的元素是以键值对(key-value)的形式存储的，能够实现根据key快速查找value Map中的键值对以Entry类型的对象实例形式存在 键(key值)不可重复，value值可以 Map支持泛型，形式如：Map HashMap类 HashMap是Map的一个重要实现类，也是最常用的，基于哈希表实现 HashMap中的Entry对象是无序排列的 key值和value值都可以为null，但是一个HashMap只能有一个key值为null的映射(key值不可重复) Map和HashMap案例说明 通过Map进行学生信息管理，其中key为学生ID，value为学生对象 通过键盘输入学生信息 对集合中的学生信息进行增、删、改、查操作 Map和HashMap案例 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110package com.fengche.collection;import java.util.HashMap;public class MapStudent &#123; // 用来承装学生类型对象 public Map&lt;String, Student&gt; students; // 在构造方法中初始化students属性 public MapStudent() &#123; this.students = new HashMap&lt;String, Student&gt;(); &#125; // 测试添加：输入学生ID，判断是否被占用；若未被占用，则输入姓名，创建新的学生对象，并且添加到st public void pushStudent() &#123; // 创建以个Scanner对象，用来获取输入的学生ID和姓名 Scanner scanner = new Scanner(System.in); int i = 0; while (i &lt; 3) &#123; System.out.println("请输入学生ID："); String id = scanner.next(); Student student = students.get(id); if (id == null) &#123; // 提示输入学生姓名 System.out.println("请输入学生姓名："); String name = scanner.next(); // 创建新的学生对象 Student newStudent = new Student(id, name); // 通过调用students的put方法，添加（id-学生）映射 students.put(id, newStudent); System.out.println("成功添加学生：" + students.get(id).name); i++; &#125; else &#123; System.out.println("该学生id已被占用！"); continue; &#125; &#125; &#125; // 测试Map的keySet方法 public void forEachStudent() &#123; // 通过keySet方法，返回Map中的所有“键”的Set集合 Set&lt;String&gt; keySet = students.keySet(); // 遍历keySet，取得每一个键，再调用get方法取得每个键对应的value for (String studentId : keySet) &#123; Student student = students.get(studentId); if (student != null) &#123; System.out.println("学生：" + student.name); &#125; &#125; &#125; // 测试删除Map中的映射 public void removeStudent() &#123; // 提示输入待删除的学生ID System.out.println("请输入要删除的学生ID！"); Scanner scanner = new Scanner(System.in); while (true) &#123; String id = scanner.next(); Student student = students.get(id); if (student == null) &#123; System.out.println("该ID不存在！"); continue; &#125; students.remove(id); System.out.println("成功删除学生：" + student.name); break; &#125; &#125; // 通过entrySet方法来遍历Map public void entrySetStudent() &#123; // 通过entrySet方法，返回Map中的所有键值对 Set&lt;Entry&lt;String, Student&gt;&gt; entrySet = students.entrySet(); for (Entry&lt;String, Student&gt; entry : entrySet) &#123; System.out.println("取得键：" + entry.getKey()); System.out.println("对应的值为：" + entry.getValue().name); &#125; &#125; // 利用put方法修改Map中的已有映射 public void modifyStudent() &#123; // 提示输入待修改的学生ID System.out.println("请输入要修改的学生ID！"); Scanner scanner = new Scanner(System.in); while (true) &#123; String id = scanner.next(); Student student = students.get(id); if (student == null) &#123; System.out.println("该ID不存在！"); continue; &#125; System.out.println("当前ID所对应的学生为：" + student.name); System.out.println("请输入新的学生姓名："); String name = scanner.next(); Student newStudent = new Student(id, name); students.put(id, newStudent); System.out.println("修改成功！"); break; &#125; &#125; public static void main(String[] args) &#123; MapStudent mapStudent = new MapStudent(); pmapStudent.pushStudent(); mapStudent.forEachStudent(); mapStudent.removeStudent(); mapStudent.entrySetStudent(); mapStudent.modifyStudent(); &#125;&#125; 判断Map中是否包含某个Key值或者某个Value值 12345678910111213141516171819202122232425262728293031package com.fengche.collection;import java.util.HashMap;public class MapStudent &#123; // 用来承装学生类型对象 public Map&lt;String, Student&gt; students; // 在构造方法中初始化students属性 public MapStudent() &#123; this.students = new HashMap&lt;String, Student&gt;(); &#125; // 略 public void containsKeyOrValue() &#123; // 在Map中，用containsKey()方法，来判断是否包含某个Key值 // 用containsValue()方法，来判断是否包含某个Value值 String id = "3"; System.out.println("在学生映射表中是否存在：" + students.containsKey(id)); // containsValue 同理，这里也是需要重写hashCode和equals方法 &#125; public static void main(String[] args) &#123; MapStudent mapStudent = new MapStudent(); // ... mapStudent.containsKeyOrValue(); &#125;&#125;]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java入门之异常]]></title>
    <url>%2F2018%2F04%2F29%2FJava%E5%85%A5%E9%97%A8%E4%B9%8B%E5%BC%82%E5%B8%B8%2F</url>
    <content type="text"><![CDATA[一、异常的简介 有异于常态，和正常情况不一样，有错误出现。阻止当前方法或作用域，称之为异常 Java异常体系结构简介 处理异常 try-catch以及try-catch-finally 如果try抛出异常，将会终止执行，程序的控制权将被移交给catch块中的异常处理程序。 try会抛出很多种类型的异常，则用多重catch语句，但要注意异常类型必须子类在前父类在后。 抛出异常 throw —— 将产生的异常抛出（动作） throws —— 声明将要抛出何种类型的异常（声明） 123public void 方法名(参数列表) throws 异常列表 &#123; // 调用会抛出异常的方法或者：先抛出一个异常 throw new Exception();&#125; 自定义异常 12345678public class DrunkException extends Exception &#123; public DrunkException() &#123; &#125; public DrunkException(String message) &#123; super(message); &#125;&#125; Java中的异常链 1234567891011121314151617181920212223242526272829303132333435/** * test1(): 抛出“喝大了”异常 * test2(): 调用test1()，捕获"喝大了"异常，并且包装成运行时异常，继续抛出 * main方法中，调用test2()，尝试捕获test2()方法抛出的异常 * */public class ChainTest &#123; public static void main(String[] srgs) &#123; ChainTest ct = new ChainTest(); try &#123; ct.test2(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; public void test1() throws DrunkException &#123; throw new DrunkException("喝车别开酒！"); &#125; public void test2() &#123; try &#123; test1(); &#125; catch (DrunkException e) &#123; RuntimeException newExc = new RuntimeException("司机一滴酒，亲人两行泪~~"); newExc.initCause(e); throw newExc; /* 或者 RuntimeException newExc = new RuntimeException(e); throw newExc; */ &#125; &#125;&#125; 实际应用中的经验与总结 a. 处理运行时异常时，采用逻辑去合理规避同时辅助try-catch处理 b. 在多重catch块后面，可以加一个catch(Exception)来处理可能会被遗漏的异常 c. 对于不确定的代码，也可以加上try-catch，处理潜在的异常 d. 尽量去处理异常，切忌只是简单的调用printStackTrace()去打印输出 e. 具体如何处理异常，要根据不同的业务需求和异常类型去决定 f. 尽量添加finally语句块去释放占用的资源]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java入门之接口]]></title>
    <url>%2F2018%2F04%2F29%2FJava%E5%85%A5%E9%97%A8%E4%B9%8B%E6%8E%A5%E5%8F%A3%2F</url>
    <content type="text"><![CDATA[一、Java中的接口 接口的概念 类是一种具体实现体，而接口定义了某一批类所需要遵守的规范，接口不关心这些类的内部数据，也不关心这些类里方法的实现细节，它只规定这些类里必须提供某些方法。 接口定义的基本语法： 1234[修饰符] interface 接口名 [extends 父接口1, 父接口2, ...] &#123; 零个到多个常量定义... 零个到多个抽象方法的定义...&#125; 接口的定义 常量：接口中的属性是常量，即使定义时不添加 public static final 修饰符，系统也会自动加上。 方法：接口中的方法只能是抽象方法，即使定义时不添加 public abstract 修饰符，系统也会自动加上。 接口的使用 一个类可以实现一个或多个接口，实现接口使用 implements 关键字。Java中一个类只能继承一个父类，是不够灵活的，通过实现多个接口可以做补充。 12345// 继承父类实现接口的语法为：[修饰符] class 类名 extends 父类 implements 接口1, 接口2, ... &#123; 类体部分// 如果继承了抽象类，需要实现继承的抽象方法；要实现接口中的抽象方法。&#125;// 如果要继承父类，继承父类必须在实现接口之前 实例： 12345package com.fengche;public interface IPlayGame &#123; public void playGame();&#125; 1234567891011121314151617181920package com.fengche;public class SmartPhone extends Telphone implements IPlayGame &#123; @Override public void call() &#123; System.out.println("通过语音来打电话"); &#125; @Override public void message() &#123; System.out.println("通过语音来发短信"); &#125; @Override public void playGame() &#123; System.out.println("具有了玩游戏的功能"); &#125;&#125; 12345678910package com.fengche;public class Psp implements IPlayGame &#123; @Override public void playGame() &#123; System.out.println("具有了玩游戏的功能"); &#125;&#125; 123456789101112package com.fengche;public class Initail &#123; public static void main(String[] args) &#123; IPlayGame ip1 = new SmartPhone(); ip1.playGame(); IPlayGame ip2 = new Psp(); ip2.playGame(); &#125;&#125; 使用接口： 接口在使用过程当中，还经常与匿名内部类配合使用 匿名内部类就是没有名字的内部类，多用于关注实现而不关注实现类的名称 12345Interface i = new Interface() &#123; public void method() &#123; System.out.println("匿名内部类实现接口的方式"); &#125;&#125;; 123456789101112131415161718192021package com.fengche;public class Initail &#123; public static void main(String[] args) &#123; IPlayGame ip3 = new IPlayGame() &#123; @Override public void playGame() &#123; System.out.println("匿名内部类实现接口的方式1"); &#125; &#125;; ip3.playGame(); new IPlayGame() &#123; public void playGame() &#123; System.out.println("匿名内部类实现接口的方式2"); &#125; &#125;.playGame(); &#125;&#125;]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java入门之多态]]></title>
    <url>%2F2018%2F04%2F29%2FJava%E5%85%A5%E9%97%A8%E4%B9%8B%E5%A4%9A%E6%80%81%2F</url>
    <content type="text"><![CDATA[一、Java中的多态多态，指的是对象的多种形态 引用多态 父类的引用可以指向本类的对象 父类的引用可以指向子类的对象 12345678910package com.fengche;public class Initail &#123; public static void main(String[] args) &#123; Animal cat = new Animal();// 父类的引用指向本类的对象 Animal dog = new Dog();// 父类的引用指向子类的对象 // Dog dog2 = new Animal();// 错误，子类的引用不能指向父类的对象 &#125;&#125; 方法多态 创建本类对象时，调用的方法为本类方法 创建子类对象时，调用的方法为子类重写的方法或者继承的方法 二、多态中的引用类型转换 向上类型转换（隐式/自动类型转换），是小类型到大类型的转换 向下类型转换（强制类型转换），是大类型大小类型的转换 instanceof 运算符，来解决引用对象的类型，避免类型转换的安全性问题 1234567891011121314151617181920package com.fengche;public class Initail &#123; public static void main(String[] args) &#123; Dog dog = new Dog(); Animal animal = dog;// 向上类型转换 自动类型转换 Dog dog2 = (Dog)animal;// 向下类型转换 强制类型转换 // 运行时出错 Cat cat = (Cat)animal;// 1.编译时 Cat类型；2.运行时 Dog类型 // 可以通过instanceof运算符避免类型转换的安全性问题 if（animal instanceof Cat) &#123; Cat cat = (Cat)animal; &#125; else &#123; System.out.println("无法进行类型转换"); &#125; &#125;&#125; 三、Java中的抽象类 语法定义： 某个类使用abstract关键字修饰，则该类为抽象类。 应用场景： a. 在某些情况下，某个父类只是知道其子类应该包含怎样的方法，但无法准确知道这些子类如何实现这些方法。 b. 从多个具有相同特征的类中抽象出一个抽象类，以这个抽象类作为子类的模板，从而避免了子类设计的随意性。 作用： 限制规定子类必须实现某些方法，但不关注实现细节 使用规则： a. abstract定义抽象类 b. abstract定义抽象方法，只有声明，不需要实现 c. 包含抽象方法的类是抽象类 d. 抽象类中可以包含普通的方法，也可以没有抽象方法 e. 抽象类不能直接创建，可以定义引用变量 123456package com.fengche;public abstract class Telphone &#123; public abstract void call();// 抽象方法没有方法体以分好结束 public abstract void message();&#125; 123456789101112131415package com.fengche;public class CellPhone extends Telphone &#123; @Override public void call() &#123; System.out.println("通过键盘来打电话"); &#125; @Override public void message() &#123; System.out.println("通过键盘来发短信"); &#125;&#125; 123456789101112131415package com.fengche;public class SmartPhone extends Telphone &#123; @Override public void call() &#123; System.out.println("通过语音来打电话"); &#125; @Override public void message() &#123; System.out.println("通过语音来发短信"); &#125;&#125;]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java入门之继承]]></title>
    <url>%2F2018%2F04%2F28%2FJava%E5%85%A5%E9%97%A8%E4%B9%8B%E7%BB%A7%E6%89%BF%2F</url>
    <content type="text"><![CDATA[一、Java中的继承 继承的概念：继承是类与类的一种关系。注：Java中的继承是单继承 继承的好处：子类拥有父类的所有属性和方法，除了private修饰的。实现代码复用 语法规则：class 子类 extends 父类 二、Java中的方法重写 什么是方法的重写：如果子类对继承父类的方法不满意，是可以重写父类继承的方法的，当调用方法时会优先调用子类的方法。 语法规则： a. 返回值类型 b. 方法名 c. 参数类型及个数都要与父类继承的方法相同，才叫方法的重写。 三、继承的初始化顺序 初始化父类再初始化子类 先执行初始化对象中属性，再执行构造方法中的初始化 四、Java中的final关键字使用final关键字做标识有“最终的”含义final可以修饰类、方法、属性和变量 - final修饰类，则该类不允许被继承 - final修饰方法，则该方法不允许被覆盖（重写） - final修饰属性，则该类的属性不会进行隐式的初始化（类的初始化属性必须有值），或在构造方法中赋值（但只能选其一） - final修饰变量，则该变量的值只能赋一次值，即变为常量 五、Java中的super关键字super关键字在对象的内部使用，可以代表父类对象。 访问父类的属性：super.name; 访问父类的方法：super.doSomething(); super关键字的应用 子类的构造过程中必须调用其父类的构造方法 如果子类的构造方法中没有显示调用父类的构造方法，则系统默认调用父类无参的构造方法 如果显示的调用构造方法，必须在子类的构造方法的第一行 如果子类构造方法中既没有显示调用父类的构造方法，而父类又没有无参的构造方法，则编译出错 六、Java中的Object类Object类是所有类的父类，如果一个类没有使用extends关键字明确标识继承另外一个类，那么这个类默认继承Object类。Object类中的方法，适合所有子类。 toString方法 在Object类里面定义toString方法的时候返回的对象的哈希code码（对象地址字符串） 可以通过重写toString方法表示出对象的属性 equals方法 比较的是对象的引用是否指向同一块内存地址 一般情况下比较两个对象时比较他的值是否一致，所以要进行重写]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java入门之封装]]></title>
    <url>%2F2018%2F04%2F28%2FJava%E5%85%A5%E9%97%A8%E4%B9%8B%E5%B0%81%E8%A3%85%2F</url>
    <content type="text"><![CDATA[一、封装 概念： 将类的某些信息隐藏在类的内部，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作和访问。 好处： a.只能通过规定的方法访问数据 b.隐藏类的实例细节，方便修改和实现 封装的实现步骤 a.修改属性的可见性，设为private b.创建getter/setter方法，用于属性的读写 c.在getter/setter方法中加入属性控制语句，对属性值的合法性进行判断 二、Java中的包 包的作用： a. 管理Java文件 b. 解决同名文件冲突 定义包：package包名 注：必须放在Java源程序的第一行 包名间可以使用“.”号隔开 eg：com.fengche.MyClass 系统中的包 java.(功能).(类) java.lang.(类) 包含java语言及基础的类 java.util.(类) 包含java语言中各种工具类 java.io.(类) 包含输入、输出相关功能的类 包的使用 a. 可以通过import关键字，在某个文件使用其他文件中的类。import com.fengche.MyClass b. Java中，包的命名规范是全小写字母拼音 c. 使用的时候不但可以加载某个包下的所有文件eg：com.fengche.* 也可以加载某个具体子包下的所有文件 eg：com.fengche.music.* 三、Java中的访问修饰符 访问修饰符 本类 同包 子类 其他 private ✅ default ✅ ✅ protected ✅ ✅ ✅ public ✅ ✅ ✅ ✅ 四、Java中的this关键字 this关键字代表当前对象 this.属性 操作当前对象的属性 this.方法 调用当前对象的方法 封装对象的属性的时候，经常会使用this关键字 五、Java中的内部类 内部类(inner Class)就是定义在另外一个类里面的类。与之对应，包含内部类的类被称为外部类。 内部类的主要作用如下： 内部类提供了更好的封装，可以把内部类隐藏在外部类之内，不允许同一个包中的其他类访问该类 内部类的方法可以直接访问外部类的所有数据，包括私有的数据 内部类所实现的功能使用外部类同样可以实现，只是有时使用内部类更方便 内部类可分为以下几种： 成员内部类 静态内部类 方法内部类 匿名内部类 12345678910111213141516171819// 外部类HelloWorldpublic class HelloWorld &#123; // 内部类Inner，类Inner在类HelloWorld的内部 public class Inner &#123; // 内部类的方法 public void show() &#123; System.out.println("show"); &#125; &#125; public static void main(String[] args) &#123; // 创建外部类对象 HelloWorld hello = new HelloWorld(); // 创建内部类对象 Inner i = hello.new Inner(); // 调用内部类对象的方法 i.show(); &#125;&#125; 六、Java中的成员内部类内部类中最常见的就是成员内部类，也称为普通内部类。如： 12345678910111213141516171819// 外部类Outerpublic class Outer &#123; private int a = 1;// 外部类的私有属性 // 内部类Inner public class Inner &#123; int b = 2;// 内部类的成员属性 public void show() &#123; System.out.println("访问外部类中的a:" + a); System.out.println("访问内部类中的b:" + b); &#125; &#125; // 测试成员内部类 public static void main(String[] args) &#123; Outer o = new Outer();// 创建外部类对象，对象名为o Inner i = o.new Inner();// 使用外部类对象创建内部类对象 i.show();// 调用内部类对象的show方法 &#125; &#125; 从上面的代码中我们可以看到，成员内部类的使用方法： Inner类定义在Outer类的内部，相当于Outer类的一个成员变量的位置，Inner类可以使用任意访问控制符，如public、protected、private等 Inner类中定义的show()方法可以直接访问Outer类中的数据，而不受访问控制符的影响，如直接访问Outer类中的私有属性a 定义了成员内部类后，必须使用外部类对象来创建内部类对象，而不能直接去new一个内部类对象，即：内部类 对象名 = 外部类对象.new 内部类(); 编译上面的程序后，会发现产生了两个.class文件 Outer$Inner.class Outer.class其中，第二个是外部类的.class文件，第一个是内部类的.class文件，即成员内部类的.class文件总是这样：外部类名$内部类名.class 另外，注意： 外部类是不能直接使用内部类的成员的方法，可先创建内部类的对象，然后通过内部类的对象来访问其成员变量和方法。 如果外部类和内部类具有相同的成员变量或方法，内部类默认访问自己的成员变量或方法，如果要访问外部类的成员变量，可以使用this关键字。如： 123456789101112// 外部类Outerpublic class Outer &#123; int b = 1;// 外部类中的成员属性a // 内部类Inner public class Inner &#123; int b = 2;// 内部类的成员属性 public void show() &#123;// 访问外部类中的成员属性b System.out.println("访问外部类中的b:" + Outer.this.b); System.out.println("访问内部类中的b:" + b); &#125; &#125;&#125; 七、Java中的静态内部类静态内部类是static修饰的内部类，这种内部类的特点是： 静态内部类不能直接访问外部类的非静态成员，但可以通过new外部类().成员 的方式访问 如果外部类的静态成员与内部类的成员名称相同，可通过“类名.静态成员”访问外部类的静态成员；如果外部类的静态成员与内部类的成员名称不相同，则可以通过“成员名”直接调用外部类的静态成员 创建静态内部类的对象时，不需要外部类的对象，可以直接创建 内部类 对象名 = new 内部类(); 12345678910111213141516171819// 外部类SOuterpublic class SOuter &#123; private int a = 1;// 外部类的私有变量 static int b = 2;// 外部类的静态变量 // 静态内部类SInner public class SInner &#123; int b = 3;// 内部类的变量 public void show() &#123;// 访问外部类中的成员属性b System.out.println("访问外部类中的b:" + SOuter.b); System.out.println("访问内部类中的b:" + b); &#125; &#125; // 测试静态内部类 public static void main(String[] args) &#123; SInner si = new SInner();// 直接创建内部类对象 si.show();// 调用show方法 &#125;&#125; 八、Java中的方法内部类方法内部类就是内部类定义在外部类的方法中，方法内部类只在该方法的内部可见，即只在该方法内可以使用。 123456789101112131415161718192021222324252627// 外部类MOuterpublic class MOuter &#123; // 外部类中的方法 public void show() &#123; final int a = 1;// 常量 int b = 2; // 方法内部类MInner class MInner &#123; int c = 3;// 内部类的变量 public void print() &#123;// 访问外部类中的成员属性b System.out.println("访问外部类的方法中的常量中a:" + a); System.out.println("访问内部类中的变量c:" + c); &#125; &#125; MInner mi = new MInner();// 创建方法内部类的对象 mi.print();// 调用内部类的方法 &#125; // 测试方法内部类 public static void main(String[] args) &#123; MOuter mo = new MOuter();// 创建外部类对象 mo.show();// 调用外部类对象的show方法 &#125;&#125; 注意：由于方法内部类不能在外部类的方法以外的地方使用，因此方法内部类不能使用访问控制符和static修饰符。]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java入门之类与对象]]></title>
    <url>%2F2018%2F04%2F26%2FJava%E5%85%A5%E9%97%A8%E4%B9%8B%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%2F</url>
    <content type="text"><![CDATA[一、面向对象 对象的概念 什么是面向对象 类 什么是对象的属性 什么是对象的方法 类与对象的关系/区别 123456789101. 万物皆对象，客观存在的事物皆为对象2. 描述一个对象属性、功能的过程，叫做面向对象3. 类是模子，确定对象将会拥有的特征（属性）和行为（方法） 类的特点： （1）类是对象的类型 （2）具有相同属性和方法的一组对象的集合4. 属性——对象具有的各种特征 每个对象的每个属性都拥有特定值5. 方法——对象执行的操作6. 类是抽象的概念，仅仅是模板，比如说：“手机”；对象是一个你能够看得到、摸得着的具体实体 二、定义类 类的重要性：所有Java程序都以类class为组织单元 什么是类？类是模子，确定对象将会拥有的特征（属性）和行为（方法） 类的组成：属性和方法 定义一个类的步骤 定义类名 编写类的属性 编写类的方法 12345678910111213public class 类名 &#123; // 定义属性部分（成员变量） 属性1的类型 属性1; 属性2的类型 属性2; ... 属性n的类型 属性n; //定义方法部分 方法1; 方法2; ... 方法n;&#125; 三、如何使用Java中的对象使用对象的步骤： 创建对象 12// 类名 对象名 = new 类名();Telphone phone = new Telphone(); 使用对象 1234// 引用对象的属性：对象名.属性phone.screen = 5;// 给screen属性赋值5// 引用对象的方法：对象名.方法名()phone.sendMessage();// 调用sendMessage()方法 四、成员变量和局部变量 成员变量在类中定义，用来描述对象将要有什么 局部变量在类的方法中定义，在方法中临时保存数据；只能在当前方法中使用 成员变量和局部变量的区别 作用域不同 局部变量的作用域仅限于定义它的方法 成员变量的作用域在整个类内部都是可见的 初始值不同 Java会给成员变量一个初始值 Java不会给局部变量赋予初始值 在同一个方法中，不允许有同名局部变量；在不同的方法中，可以有同名局部变量 两类变量同名时，局部变量具有更高的优先级 五、构造方法 使用new+构造方法 创建一个新的对象 构造方法是定义在Java类中的一个用来初始化对象的方法 构造方法与类同名且没有返回值 当没有指定构造方法时，系统会自动添加无参的构造方法 当有指定构造方法，无论是有参、无参的构造方法，都不会自动添加无参的构造方法 构造方法的重载：方法名相同，但参数不同的多个方法，调用时会自动根据不同的参数选择相应的方法 构造方法不但可以给对象的属性赋值，还可以保证给对象的属性赋一个合理的值 六、Java中的静态变量Java中被static修饰的成员称为静态成员或者类成员。它属于整个类所有，而不是某个对象所有，即被类的所有对象所共享。静态成员可以使用类名直接访问，也可以使用对象名进行访问。当然，鉴于他作用的特殊更推荐用类名访问~~ 12345678910111213public class HelloWorld &#123; // 定义静态变量 static String name = "JAVA"; public static void main(String[] args) &#123; // 使用类名访问静态变量 System.out.println(HelloWorld.name); // 使用对象名访问静态变量 HelloWorld hello = new HelloWorld(); System.out.println(hello.name); &#125;&#125; 七、Java中的静态方法与静态变量一样，我们也可以使用static修饰方法，称为静态方法或类方法。其实main方法就是静态方法。 123456789101112131415public class HelloWorld &#123; // 定义静态方法 public static void print() &#123; System.out.println("静态方法"); &#125; public static void main(String[] args) &#123; // 使用类名调用静态方法 HelloWorld.print(); // 使用对象名调用静态方法 HelloWorld hello = new HelloWorld(); hello.print(); &#125;&#125; 需要注意： 1.静态方法中可以直接调用同类中的静态成员，但不能直接调用非静态成员。如：12345678910public class HelloWorld &#123; String name = "dhuang";// 非静态变量name static String hobby = "coding";// 静态变量hobby // 定义静态方法 public static void print() &#123; System.out.println(name);// 不能直接调用非静态变量 System.out.println(hobby);// 可以直接调用静态变量 &#125;&#125; 如果希望在静态方法中调用非静态变量，可以通过创建类的对象，然后通过对象来访问非静态变量。如：1234567// 在静态方法中调用非静态变量public static void print() &#123; // 创建类的对象 HelloWorld hello = new HelloWorld(); System.out.println(hello.name);// 通过对象来实现在静态方法中调用非静态变量 System.out.println(hobby);// 可以直接调用静态变量&#125; 2.在普通成员方法中，则可以直接访问同类的非静态变量和静态变量，如下所示：12345678String name = "dhuang";// 非静态变量namestatic String hobby = "coding";// 静态变量hobby// 普通成员方法可以直接访问非静态变量和静态变量public void show() &#123; System.out.println(name); System.out.println(hobby);&#125; 3.静态方法中不能直接调用非静态方法，需要通过对象来访问非静态方法。如：123456789101112131415161718192021String name = "dhuang";// 非静态变量namestatic String hobby = "coding";// 静态变量hobby// 普通成员方法public void show() &#123; System.out.println(name); System.out.println(hobby);&#125;// 静态方法public static void print() &#123; System.out.println("静态方法");&#125;public static void main(String[] args) &#123; // 普通成员方法必须通过对象来调用 HelloWorld hello = new HelloWorld(); hello.show(); // 可以直接调用静态方法 print();&#125; 八、Java中静态初始化块Java中可以通过初始化块进行数据赋值。如：1234567public class HelloWorld &#123; String name;// 定义一个成员变量 // 通过初始化块为成员变量赋值 &#123; name = "dhuang"; &#125;&#125; 在类的声明中，可以包含多个初始化块，当创建类的实例时，就会一次执行这些代码块。如果使用static修饰初始化块，就称为静态初始化块。 需要特别注意：静态初始化块只在类加载时执行，且只会执行一次，同时静态初始化块只能给静态变量赋值，不能初始化普通的成员变量。 1234567891011121314151617181920212223242526272829303132333435363738public class HelloWorld &#123; int num1;// 声明变量num1 int num2;// 声明变量num2 static int num3;// 声明静态变量num3 public HelloWorld() &#123;// 构造方法 num1 = 1; System.out.println("通过构造函数给普通成员变量赋值"); &#125; &#123;// 初始化块 num2 = 2; System.out.println("通过初始化块给普通成员变量赋值"); &#125; static &#123;// 静态初始化块 num3 = 3; System.out.println("通过静态初始化块给静态变量赋值"); &#125; public static void main(String[] args) &#123; HelloWorld hello = new HelloWorld(); System.out.println(hello.num1); System.out.println(hello.num2); System.out.println(num3); HelloWorld hello2 = new HelloWorld();// 再次创建类的对象 &#125; // 通过静态初始化块给静态变量赋值 // 通过初始化块给普通成员变量赋值 // 通过构造函数给普通成员变量赋值 // 1 // 2 // 3 // 通过初始化块给普通成员变量赋值 // 通过构造函数给普通成员变量赋值&#125; 通过输出结果，我们可以看到，程序运行时静态初始化块最先被执行，然后执行普通初始化块，最后才执行构造方法。由于静态初始化块只在类加载时执行一次，所以当再次创建对象hello2时并未执行静态初始化块。]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[D3入门 - 坐标轴]]></title>
    <url>%2F2017%2F10%2F05%2FD3%E5%85%A5%E9%97%A8-%E5%9D%90%E6%A0%87%E8%BD%B4%2F</url>
    <content type="text"><![CDATA[坐标轴，是可视化图表中经常出现的一种图形，由一些列线段和刻度组成。坐标轴在 SVG 中是没有现成的图形元素的，需要用其他的元素组合构成。 定义坐标轴1234567891011// 数据var dataset = [2.5, 2.1, 1.7, 1.3, 0.9];// 定义比例尺var linear = d3.scale.linear() .domain([0, d3.max(dataset)]) .range([0, 250]);var axis = d3.svg.axis() .scale(linear)// 指定比例尺 .orient("bottom")// 指定刻度的方向 .ticks(7);// 指定刻度的数量 定义坐标轴，其中使用了线性比例尺 linear。其中： d3.svg.axis()：D3 中坐标轴的组件，能够在 SVG 中生成组成坐标轴的元素。 scale()：指定比例尺。 orient()：指定刻度的朝向，bottom 表示在坐标轴的下方显示。 ticks()：指定刻度的数量。 在 SVG 中添加坐标轴12svg.append("g") .call(axis); 在 D3 中，call() 的参数是一个函数。调用之后，将当前的选择集作为参数传递给此函数。也就是说，以下两段代码是相等的。1234567function foo(selection) &#123; selection .attr("name1", "value1") .attr("name2", "value2");&#125;foo(d3.selectAll("div")) 和1d3.selectAll("div").call(foo); 是相等的。 绘制效果]]></content>
      <categories>
        <category>D3</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>D3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[D3入门 - 制作简易图表]]></title>
    <url>%2F2017%2F10%2F05%2FD3%E5%85%A5%E9%97%A8-%E5%88%B6%E4%BD%9C%E7%AE%80%E6%98%93%E5%9B%BE%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[画布HTML 5 提供两种强有力的“画布”：SVG 和 Canvas。 SVGSVG，指可缩放矢量图形（Scalable Vector Graphics），是用于描述二维矢量图形的一种图形格式，是由万维网联盟制定的开放标准。SVG 使用 XML 格式来定义图形，除了 IE8 之前的版本外，绝大部分浏览器都支持 SVG，可将 SVG 文本直接嵌入 HTML 中显示。 SVG 有如下特点： SVG 绘制的是矢量图，因此对图像进行放大不会失真。 基于 XML，可以为每个元素添加 JavaScript 事件处理器。 每个图形均视为对象，更改对象的属性，图形也会改变。 不适合游戏应用。 CanvasCanvas 是通过 JavaScript 来绘制 2D 图形，是 HTML 5 中新增的元素。 Canvas 有如下特点： 绘制的是位图，图像放大后会失真。 不支持事件处理器。 能够以 .png 或 .jpg 格式保存图像 适合游戏应用 绘制矩形在 SVG 中，矩形的元素标签是 rect。矩形的属性，常用的有四个： x：矩形左上角的 x 坐标 y：矩形左上角的 y 坐标 width：矩形的宽度 height：矩形的高度 1234567891011121314151617var dataset = [250, 210, 170, 130, 90];var rectHeight = 25; // 每个矩形所占的像素高度(包括空白)svg.selectAll("rect")// 选择svg内所有的矩形 .data(dataset)// 绑定数组 .enter()// 指定选择集的enter部分， // 有数据，而没有足够图形元素的时候，使用此方法可以添加足够的元素 .append("rect")// 添加足够数量的矩形元素 .attr("x", 20) .attr("y", function(d, i) &#123; return i * rectHeight; &#125;) .attr("width", function(d) &#123; return d; &#125;) .attr("height", rectHeight - 2) .attr("fill", "steelblue");// 设置颜色 绘制效果]]></content>
      <categories>
        <category>D3</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>D3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JSkata]]></title>
    <url>%2F2017%2F09%2F06%2FJSkata%2F</url>
    <content type="text"><![CDATA[组件编写step11234567891011121314var should = require('should');var Class = function() &#123; var klass = function() &#123;&#125;; return klass;&#125;;describe('要有自己的框架', function() &#123; it('要有类', function() &#123; var Person = new Class(); var o = new Person(); o.should.be.ok; &#125;);&#125;); step2123456789101112131415161718192021222324252627282930var should = require('should');var Class = function() &#123; var klass = function() &#123;&#125;; return klass;&#125;;describe('要有自己的框架', function() &#123; it('要有类', function() &#123; var Person = new Class(); var o = new Person(); o.should.be.ok; &#125;); it('要有方法', function() &#123; var Person = new Class(&#123; show: function() &#123;&#125;, sayHello: function() &#123;&#125; &#125;); // var o = new Person(); var o = &#123;&#125;; o.__proto__ = &#123; show: function() &#123;&#125;, sayHello: function() &#123;&#125; &#125;; Person.call(o); o.should.have.properties('show', 'sayHello'); &#125;);&#125;); step3123456789101112131415161718192021222324252627282930313233var should = require('should');var Class = function() &#123; var klass = function() &#123;&#125;; return klass;&#125;;describe('要有自己的框架', function() &#123; it('要有类', function() &#123; var Person = new Class(); var o = new Person(); o.should.be.ok; &#125;); it('要有方法', function() &#123; var Person = new Class(&#123; show: function() &#123;&#125;, sayHello: function() &#123;&#125; &#125;); Person.prototype = &#123; show: function() &#123;&#125;, sayHello: function() &#123;&#125; &#125;; // var o = new Person(); var o = &#123;&#125;; o.__proto__ = Person.prototype; Person.call(o); o.should.have.properties('show', 'sayHello'); &#125;);&#125;); step41234567891011121314151617181920212223242526var should = require('should');var Class = function(options) &#123; var klass = function() &#123;&#125;; for (var method in options) &#123; klass.prototype[method] = options[method]; &#125; return klass;&#125;;describe('要有自己的框架', function() &#123; it('要有类', function() &#123; var Person = new Class(); var o = new Person(); o.should.be.ok; &#125;); it('要有方法', function() &#123; var Person = new Class(&#123; show: function() &#123;&#125;, sayHello: function() &#123;&#125; &#125;); var o = new Person(); o.should.have.properties('show', 'sayHello'); &#125;);&#125;); step5123456789101112131415161718192021222324252627282930313233343536373839404142434445var should = require('should');var Class = function(options) &#123; var klass = function() &#123; if (this.init) &#123; this.init.apply(this, arguments); &#125; &#125;; for (var method in options) &#123; klass.prototype[method] = options[method]; &#125; return klass;&#125;;describe('要有自己的框架', function() &#123; it('要有类', function() &#123; var Person = new Class(); var o = new Person(); o.should.be.ok; &#125;); it('要有方法', function() &#123; var Person = new Class(&#123; show: function() &#123;&#125;, sayHello: function() &#123;&#125; &#125;); var o = new Person(); o.should.have.properties('show', 'sayHello'); &#125;); it('要有构造函数', function() &#123; var Person = new Class(&#123; init: function(name) &#123; this.name = name; &#125;, show: function() &#123;&#125;, sayHello: function() &#123;&#125; &#125;); var o = new Person('dhuang'); o.name.should.eql('dhuang'); o.should.have.properties('show', 'sayHello'); &#125;);&#125;); step612345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879var should = require('should');var Class = function(options) &#123; var klass = function() &#123; if (this.init) &#123; this.init.apply(this, arguments); &#125; &#125;; for (var method in options) &#123; klass.prototype[method] = options[method]; &#125; klass.extends = function(options) &#123; var child = function() &#123; if (this.init) &#123; this.init.apply(this, arguments); &#125; &#125;; var F = function() &#123;&#125;; F.prototype = this.prototype; child.prototype = new F(); for (var method in options) &#123; child.prototype[method] = options[method]; &#125; child.prototype.super = this.prototype; return child; &#125;; return klass;&#125;;describe('要有自己的框架', function() &#123; it('要有类', function() &#123; var Person = new Class(); var o = new Person(); o.should.be.ok; &#125;); it('要有方法', function() &#123; var Person = new Class(&#123; show: function() &#123;&#125;, sayHello: function() &#123;&#125; &#125;); var o = new Person(); o.should.have.properties('show', 'sayHello'); &#125;); it('要有构造函数', function() &#123; var Person = new Class(&#123; init: function(name) &#123; this.name = name; &#125;, show: function() &#123;&#125;, sayHello: function() &#123;&#125; &#125;); var o = new Person('dhuang'); o.name.should.eql('dhuang'); o.should.have.properties('show', 'sayHello'); &#125;); it('要有复用', function() &#123; var Person = new Class(&#123; show: function() &#123;&#125; &#125;); var Customer = Person.extends(&#123; init: function(name) &#123; this.name = name; &#125;, sayHello: function() &#123;&#125; &#125;); var o = new Customer('dh'); o.name.should.eql('dh'); o.should.have.properties('show', 'sayHello'); &#125;);&#125;);]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F09%2F06%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
